################################################################################
###  SBND Continuous Integration test configuration
################################################################################
#  Table of contents
######################
#
#  [0] introduction (documentation)
#   [.1] definitions
#   [.2] overview of the tests
#   [.3] calibration of the expected resource usage ranges
#  [1] common definitions (`DEFAULT` section)
#  [2] single particle tests
#   [.1] quick tests
#   [.2] sequential tests
#  [3] data-like events: neutrino and cosmic background tests
#   [.1] quick tests
#   [.2] sequential tests
#  [4] gallery tests
#  [5] other tests
#  [A] special suite definitions for continuous integration framework (`lar_ci`)
#
################################################################################
#  [0] Introduction
#####################
#
# Many tests execute the same test driver script (`EXPSCRIPT_SBNDCODE`) with
# different command line arguments.
# The script is currently just delegating the task to a template script provided
# by lar_ci UPS product.
# 
# For a lengthy explanation of why the script path is not specified in
# EXPSCRIPT_SBNDCODE, see test/ci/CMakeFiles.txt. What is relevant here is that
# this should allow the execution of the integration tests from command line on
# both development and running environment.
# Reminder: to get the list of tests, run:
#     
#     test_runner -l
#     
#  *** INTEGRATION TESTS REQUIRE A CERTIFICATE PROXY TO ALLOW dCache ACCESS ***
# 
# The convention here is that lower case variables are special variables that
# are used by the C.I. system (usually, the test_runner script), while the
# upper case variables are our own. Note that these variable names should be
# marked with a SBND tag not to conflict with others from the additional tests
# that are queued together with these ones.
# 
# 
# The files needed for the tests are kept in dCache and, unless the test
# description specifies otherwise, they are accessed via XRootD.
# The chosen pattern is that:
# - the same files work both as input for a stage of a sequential test, and as a
#   reference for the previous stage in the sequence (in this configuration, the
#   two concepts are kept separate)
# - the storage is structures in subdirectories of "reference":
#   * the first level contains the build identifier (typically "Reference" plus
#     a time stamp; the most recent blessed set is also present as plain
#     "Reference")
#   * the second level contains a name related to the test suite; this is to
#     differentiate between different suites which all have a `detsim` stage,
#     a `g4` stage, etc.
#   * the third level contains a label of the test, as the "stage"
#
################
#  [0.1] Definitions
# ====================
# 
# Workflows:
# * basic 5-stage simulation workflow:
#   1. generation (`gen`), test-dependent
#   2. propagation through detector (`g4`) based on `standard_g4_sbnd.fcl`
#   3. digitisation (`detsim`) based on `standard_detsim_sbnd.fcl`
#   4. basic reconstruction (`reco_basic`) based on `standard_reco_basic_sbnd.fcl`
#   5. flattened analysis format (`anatree`) based on `standard_anatree_sbnd.fcl`
# * short workflows: like the normal workflows, but without the flattened
#     analysis format stage (no `anatree`)
# 
# Types:
# * sequential: input for the first stage is an empty file, the next stages
#     use as input the output of the previous stage;
# * independent: input for the first stage is the same as in the sequential
#     test, the next stages use as input reference files produced from the
#     previous stage in the sequential test; these tests can be run in parallel;
# * "quick": are usually test of "independent" type with a low number of events;
#     quick tests are recommended to be kept under 3 minutes run-time (wall
#     clock) each, not to challenge the endurance of the impatient tester.
# 
#
################
#  [0.2] Overview of the test suites
# ====================================
# 
# Test suites:
# * single particle simulation tests (variable tag: `SINGLE_SBNDCODE`),
#   basic 5-stage simulation workflow, based on `prodsingle_sbnd.fcl`
#   * `single_quick_test_sbndcode`: (type: independent) test with few events
#   * `single_seq_test_sbndcode`: (type: sequential) test with more events
#        than quick
# * data-like simulation tests (variable tag: `NUCOSMICS_SBNDCODE`),
#   basic 5-stage simulation workflow, with a neutrino event and cosmic ray
#   background
#   * `nucosmics_quick_test_sbndcode`: (type: independent) test with few events
#   * `nucosmics_seq_test_sbndcode`: (type: sequential) test with more events
#        than quick
# 
# * `develop_test_sbndcode`: recommended to be run by developers before pushing,
#      when modifying sources of little consequence
# * `complete_test_sbndcode`: recommended to be run by developers before pushing
#      changes that may be suspected of having a widespread effect
# * `generate_reference_sbndcode`: special suite generating *all* the reference
#      files
# * `all_tests_sbndcode`: all tests; mostly for maintenance and debugging
# 
#
################
#  [0.3] Calibration of the expected resource usage ranges
# =========================================================
# 
# The configuration elements `cpu_usage_range` and `mem_usage_range` for each
# test will need to be calibrated:
# # run `test_runner` once with the `--verbose` option
# # check that it succeeded!
# # use the VAX-GMIP figure "kVs" as a reference to set `cpu_usage_range`
# # use the "kb" figure as reference to set `mem_usage_range`
# 
# Allow a good margin for both ranges.
#
#
################################################################################
#  [1] Common definitions
################################################################################
# 
# The configuration values should have a `SBNDCODE` tag in their key not to be
# casually overridden when other configurations (from other experiments) are
# pulled in. The test execution environment can be promiscuous!
# 
# NOTE: the value of these configuration elements can be overridden in the
#       individual test sections; substitution of the placeholders in their
#       value will happen *after* the override took place; for example:
#           
#           Path=/pnfs/sbnd/persistent/ContinuousIntegration
#           File=%(Path)s/Empty.root
#           Path=/sbnd/data/ContinuousIntegration
#           
#       will result into `File=/sbnd/data/ContinuousIntegration/Empty.root`.
#       
# test

[DEFAULT]
# the number of events to process in the sequential tests;
# remember that this ends up being the number of events in the reference files
# for the quick tests too, so pick it large enough to cover all the events in those tests
NEVENTS_SEQ_SINGLE_SBNDCODE=5
NEVENTS_SEQ_NUCOSMICS_SBNDCODE=5

# enable running the test jobs, the product presence check and the check of their size
RUN_TEST_SBNDCODE=1
CHECK_PRODUCTS_SBNDCODE=1
CHECK_PRODUCT_SIZE_SBNDCODE=1
CHECK_CAF_DIFF_SBNDCODE=0

# enable running the test jobs and the caf diff check
RUN_TEST_SBNDCODE_CAFS=1
CHECK_PRODUCTS_SBNDCODE_CAFS=0
CHECK_PRODUCT_SIZE_SBNDCODE_CAFS=0
CHECK_CAF_DIFF_SBNDCODE_CAFS=1

# this prefix is common to all FHiCL configuration files of SBND C.I. tests
CI_FHICL_PREFIX_SBNDCODE=sbnd_ci_

# file paths:
# - relative path defining the location of all SBND integration test data
BASEFILERELPATH_SBNDCODE=sbnd/persistent/stash/ContinuousIntegration
# - absolute path with direct POSIX access to dCache
BASEFILEDIR_SBNDCODE=/pnfs/%(BASEFILERELPATH_SBNDCODE)s
# - absolute path with XRootD access to dCache
# - use XRootD port 1095 that allows unauthenticated XRootD access
XROOTD_BASEFILEDIR_SBNDCODE=xroot://fndca1.fnal.gov:1095/pnfs/fnal.gov/usr/%(BASEFILERELPATH_SBNDCODE)s
# - the subdirectory hosting the selected input and reference, and the full paths (both POSIX and XRootD)
# NOTE: the configuration value 'INPUTFILEDIR_SBNDCODE' is also used in the C.I. test workflow:
#       its name must not be changed!
INPUTFILEDIR_SBNDCODE=%(BASEFILEDIR_SBNDCODE)s/reference
XROOTD_INPUTFILEDIR_SBNDCODE=%(XROOTD_BASEFILEDIR_SBNDCODE)s/reference
REFERENCEFILEDIR_SBNDCODE=%(BASEFILEDIR_SBNDCODE)s/reference
XROOTD_REFERENCEFILEDIR_SBNDCODE=%(XROOTD_BASEFILEDIR_SBNDCODE)s/reference

# extra layer of directory for specific tests:
SINGLE_INPUT_DIRNAME_SBNDCODE=standard
NUCOSMICS_INPUT_DIRNAME_SBNDCODE=standard
FCLCHECK_INPUT_DIRNAME_SBNDCODE=standard

# the test mask collects check requests in a single string
TESTMASK_SBNDCODE=%(RUN_TEST_SBNDCODE)s%(CHECK_PRODUCTS_SBNDCODE)s%(CHECK_PRODUCT_SIZE_SBNDCODE)s%(CHECK_CAF_DIFF_SBNDCODE)s
TESTMASK_SBNDCODE_CAFS=%(RUN_TEST_SBNDCODE_CAFS)s%(CHECK_PRODUCTS_SBNDCODE_CAFS)s%(CHECK_PRODUCT_SIZE_SBNDCODE_CAFS)s%(CHECK_CAF_DIFF_SBNDCODE_CAFS)s

# this is the script we use for most of the tests
# (lookup in `PATH` environment variable directories; provided by `lar_ci`)
EXPSCRIPT_SBNDCODE=ci_regression_test_template.sh

# arguments used by EXPSCRIPT_SBNDCODE
BASE_STDARGS_SBNDCODE=--executable lar --nevents %(NEVENTS)s --stage-name %(STAGE_NAME)s --fhicl %(FHiCL_FILE)s --testmask %(TESTMASK_SBNDCODE)s
STDARGS_NOOUTPUT_SBNDCODE=%(BASE_STDARGS_SBNDCODE)s
STDARGS_SBNDCODE=%(BASE_STDARGS_SBNDCODE)s --outputs %(OUTPUT_STREAM)s

# arguments used by EXPSCRIPT_SBNDCODE for CAF tests
BASE_STDARGS_SBNDCODE_CAFS=--executable lar --nevents %(NEVENTS)s --stage-name %(STAGE_NAME)s --fhicl %(FHiCL_FILE)s --testmask %(TESTMASK_SBNDCODE_CAFS)s
STDARGS_NOOUTPUT_SBNDCODE_CAFS=%(BASE_STDARGS_SBNDCODE_CAFS)s
STDARGS_SBNDCODE_CAFS=%(BASE_STDARGS_SBNDCODE_CAFS)s --outputs %(OUTPUT_STREAM)s

# this is the tag we append to the SBND-specific test configuration variable names
# (e.g. "TESTMASK_SBNDCODE"); it is used by the C.I. system
CI_EXP_CODE=SBNDCODE

# build_identifier and build_platform are passed by the C.I. system
IDENTIFIER_SBNDCODE=${build_identifier}
# these string is used by the C.I. system to concoct the name of a reference file
# from the name of the output file; that means this tag MUST be in the output
# file name, or else the reference file will have the same name as the current
# output (which causes havoc).
# Also, use these only for the output art ROOT file, since the variable
# substitution (from IDENTIFIER_SBNDCODE) is not correctly handled in the
# `output#` directives.
REF_SBNDCODE=Reference%(IDENTIFIER_SBNDCODE)s
CUR_SBNDCODE=Current%(IDENTIFIER_SBNDCODE)s
CUR_SBNDCODE_CAFS=Current


################################################################################
#  [2] Single particle tests
##############################
#
# These tests ultimately utilise a simulated event from `prodsingle_sbnd.fcl`,
# which currently (`v06_69_00`) generates a muon.
# 
# The workflows are the "standard" one with basic reconstruction
# (see section [0.1]).
# 
# The workflow initiates from an original input file with empty events, that
# with NuRandomService set on `perEvent` policy should guarantee "perfect"
# reproducibility. The blocks are complicate enough (explanations are in wiki at
# https://cdcvs.fnal.gov/redmine/projects/lar-ci/wiki/Test_Runner_Introduction )
# and they are designed so that a new stage can be added by copying a block
# into a new one and changing:
# - the test name in brackets (of course!)
# - the `STAGE_NAME` and `INPUT_STAGE_NAME` variables
# - `cpu_usage_range` and `mem_usage_range` will need to be calibrated too
#   (run `test_runner` once with the `--verbose` option, check that it
#   succeeded, and use the VAX-GMIP figure "kVs" as a reference to set
#   `cpu_usage_range`, and the "kb" figure as reference to set
#   `mem_usage_range`)
#
# The configuration of the command line overrides the `TFileService` output file
# name (`--TFileName` option) to conform to a simple pattern, as it is also
# internally done by the test script for the art ROOT output file (from
# `RootOutput` module).
# 
#
#  [2.1] Single particle tests: quick tests
# ===========================================
#
# These tests are of "quick" type.
# 
# The input files are reference files from the corresponding sequential test
# (`single_XXX_seq_test_sbndcode`), except for the generator stage, where the
# input file is the same as in the sequential test.
#

[test single_gen_quick_test_sbndcode]
STAGE_NAME=gen
NEVENTS=5
# calibrated on sbndbuild01.fnal.gov on 20180305
cpu_usage_range=0:100
mem_usage_range=600000:1000000

script=%(EXPSCRIPT_SBNDCODE)s
FHiCL_FILE=%(CI_FHICL_PREFIX_SBNDCODE)ssingle_%(STAGE_NAME)s_quick_test_sbndcode.fcl
OUTPUT_BASE_FILE_NAME=single_%(STAGE_NAME)s_test_sbndcode
EXTRA_DIR=%(SINGLE_INPUT_DIRNAME_SBNDCODE)s
INPUT_STREAM=%(XROOTD_BASEFILEDIR_SBNDCODE)s/input/empty/EmptyEvents_01.root
OUTPUT_STREAM=%(OUTPUT_BASE_FILE_NAME)s_%(CUR_SBNDCODE)s.root
REFERENCE_FILES=%(XROOTD_REFERENCEFILEDIR_SBNDCODE)s/%(EXTRA_DIR)s/%(STAGE_NAME)s/%(OUTPUT_BASE_FILE_NAME)s_%(REF_SBNDCODE)s.root
TFILENAME=hist-%(OUTPUT_BASE_FILE_NAME)s.root
args=%(STDARGS_SBNDCODE)s --input-file %(INPUT_STREAM)s --reference-files %(REFERENCE_FILES)s --extra-options --TFileName,%(TFILENAME)s
parse_art_output=True
output1=%(TFILENAME)s


[test single_g4_quick_test_sbndcode]
STAGE_NAME=g4
INPUT_STAGE_NAME=gen
NEVENTS=2
# calibrated on sbndbuild01.fnal.gov on 20180305
cpu_usage_range=2200:3700
mem_usage_range=2000000:4000000

script=%(EXPSCRIPT_SBNDCODE)s
FHiCL_FILE=%(CI_FHICL_PREFIX_SBNDCODE)ssingle_%(STAGE_NAME)s_quick_test_sbndcode.fcl
INPUT_BASE_FILE_NAME=single_%(INPUT_STAGE_NAME)s_test_sbndcode
OUTPUT_BASE_FILE_NAME=single_%(STAGE_NAME)s_test_sbndcode
EXTRA_DIR=%(SINGLE_INPUT_DIRNAME_SBNDCODE)s
INPUT_STREAM=%(XROOTD_INPUTFILEDIR_SBNDCODE)s/%(EXTRA_DIR)s/%(INPUT_STAGE_NAME)s/%(INPUT_BASE_FILE_NAME)s_%(REF_SBNDCODE)s.root
OUTPUT_STREAM=%(OUTPUT_BASE_FILE_NAME)s_%(CUR_SBNDCODE)s.root
REFERENCE_FILES=%(XROOTD_REFERENCEFILEDIR_SBNDCODE)s/%(EXTRA_DIR)s/%(STAGE_NAME)s/%(OUTPUT_BASE_FILE_NAME)s_%(REF_SBNDCODE)s.root
TFILENAME=hist-%(OUTPUT_BASE_FILE_NAME)s.root
args=%(STDARGS_SBNDCODE)s --input-file %(INPUT_STREAM)s --reference-files %(REFERENCE_FILES)s --extra-options --TFileName,%(TFILENAME)s
parse_art_output=True
output1=%(TFILENAME)s


[test single_detsim_quick_test_sbndcode]
STAGE_NAME=detsim
INPUT_STAGE_NAME=g4
NEVENTS=2
# calibrated on sbndbuild01.fnal.gov on 20180305
cpu_usage_range=750:1050
mem_usage_range=1000000:3000000

script=%(EXPSCRIPT_SBNDCODE)s
FHiCL_FILE=%(CI_FHICL_PREFIX_SBNDCODE)ssingle_%(STAGE_NAME)s_quick_test_sbndcode.fcl
INPUT_BASE_FILE_NAME=single_%(INPUT_STAGE_NAME)s_test_sbndcode
OUTPUT_BASE_FILE_NAME=single_%(STAGE_NAME)s_test_sbndcode
EXTRA_DIR=%(SINGLE_INPUT_DIRNAME_SBNDCODE)s
INPUT_STREAM=%(XROOTD_INPUTFILEDIR_SBNDCODE)s/%(EXTRA_DIR)s/%(INPUT_STAGE_NAME)s/%(INPUT_BASE_FILE_NAME)s_%(REF_SBNDCODE)s.root
OUTPUT_STREAM=%(OUTPUT_BASE_FILE_NAME)s_%(CUR_SBNDCODE)s.root
REFERENCE_FILES=%(XROOTD_REFERENCEFILEDIR_SBNDCODE)s/%(EXTRA_DIR)s/%(STAGE_NAME)s/%(OUTPUT_BASE_FILE_NAME)s_%(REF_SBNDCODE)s.root
TFILENAME=hist-%(OUTPUT_BASE_FILE_NAME)s.root
args=%(STDARGS_SBNDCODE)s --input-file %(INPUT_STREAM)s --reference-files %(REFERENCE_FILES)s --extra-options --TFileName,%(TFILENAME)s
parse_art_output=True
output1=%(TFILENAME)s


[test single_reco1_quick_test_sbndcode]
STAGE_NAME=reco1
INPUT_STAGE_NAME=detsim
NEVENTS=2
# calibrated on sbndbuild01.fnal.gov on 20180306
cpu_usage_range=1000:1500
mem_usage_range=1000000:3000000

script=%(EXPSCRIPT_SBNDCODE)s
FHiCL_FILE=%(CI_FHICL_PREFIX_SBNDCODE)ssingle_%(STAGE_NAME)s_quick_test_sbndcode.fcl
INPUT_BASE_FILE_NAME=single_%(INPUT_STAGE_NAME)s_test_sbndcode
OUTPUT_BASE_FILE_NAME=single_%(STAGE_NAME)s_test_sbndcode
EXTRA_DIR=%(SINGLE_INPUT_DIRNAME_SBNDCODE)s
INPUT_STREAM=%(XROOTD_INPUTFILEDIR_SBNDCODE)s/%(EXTRA_DIR)s/%(INPUT_STAGE_NAME)s/%(INPUT_BASE_FILE_NAME)s_%(REF_SBNDCODE)s.root
OUTPUT_STREAM=%(OUTPUT_BASE_FILE_NAME)s_%(CUR_SBNDCODE)s.root
REFERENCE_FILES=%(XROOTD_REFERENCEFILEDIR_SBNDCODE)s/%(EXTRA_DIR)s/%(STAGE_NAME)s/%(OUTPUT_BASE_FILE_NAME)s_%(REF_SBNDCODE)s.root
TFILENAME=hist-%(OUTPUT_BASE_FILE_NAME)s.root
args=%(STDARGS_SBNDCODE)s --input-file %(INPUT_STREAM)s --reference-files %(REFERENCE_FILES)s --extra-options --TFileName,%(TFILENAME)s
parse_art_output=True
output1=%(TFILENAME)s

[test single_reco2_quick_test_sbndcode]
STAGE_NAME=reco2
INPUT_STAGE_NAME=reco1
NEVENTS=2
# calibrated on sbndbuild01.fnal.gov on 20180306
cpu_usage_range=100:700
mem_usage_range=500000:2500000

script=%(EXPSCRIPT_SBNDCODE)s
FHiCL_FILE=%(CI_FHICL_PREFIX_SBNDCODE)ssingle_%(STAGE_NAME)s_quick_test_sbndcode.fcl
INPUT_BASE_FILE_NAME=single_%(INPUT_STAGE_NAME)s_test_sbndcode
OUTPUT_BASE_FILE_NAME=single_%(STAGE_NAME)s_test_sbndcode
EXTRA_DIR=%(SINGLE_INPUT_DIRNAME_SBNDCODE)s
INPUT_STREAM=%(XROOTD_INPUTFILEDIR_SBNDCODE)s/%(EXTRA_DIR)s/%(INPUT_STAGE_NAME)s/%(INPUT_BASE_FILE_NAME)s_%(REF_SBNDCODE)s.root
OUTPUT_STREAM=%(OUTPUT_BASE_FILE_NAME)s_%(CUR_SBNDCODE)s.root
REFERENCE_FILES=%(XROOTD_REFERENCEFILEDIR_SBNDCODE)s/%(EXTRA_DIR)s/%(STAGE_NAME)s/%(OUTPUT_BASE_FILE_NAME)s_%(REF_SBNDCODE)s.root
TFILENAME=hist-%(OUTPUT_BASE_FILE_NAME)s.root
args=%(STDARGS_SBNDCODE)s --input-file %(INPUT_STREAM)s --reference-files %(REFERENCE_FILES)s --extra-options --TFileName,%(TFILENAME)s
parse_art_output=True
output1=%(TFILENAME)s

[test single_caf_quick_test_sbndcode]
STAGE_NAME=caf
INPUT_STAGE_NAME=reco2
NEVENTS=5
# calibrated on sbndbuild01.fnal.gov on 20180306
cpu_usage_range=300:350
mem_usage_range=500000:3500000

script=%(EXPSCRIPT_SBNDCODE)s
FHiCL_FILE=%(CI_FHICL_PREFIX_SBNDCODE)ssingle_%(STAGE_NAME)s_quick_test_sbndcode.fcl
INPUT_BASE_FILE_NAME=single_%(INPUT_STAGE_NAME)s_test_sbndcode
OUTPUT_BASE_FILE_NAME=single_%(STAGE_NAME)s_test_sbndcode
EXTRA_DIR=%(SINGLE_INPUT_DIRNAME_SBNDCODE)s
INPUT_STREAM=%(XROOTD_INPUTFILEDIR_SBNDCODE)s/%(EXTRA_DIR)s/%(INPUT_STAGE_NAME)s/%(INPUT_BASE_FILE_NAME)s_%(REF_SBNDCODE)s.root
OUTPUT_STREAM=%(OUTPUT_BASE_FILE_NAME)s_%(CUR_SBNDCODE_CAFS)s.caf.root
REFERENCE_FILES=%(XROOTD_REFERENCEFILEDIR_SBNDCODE)s/%(EXTRA_DIR)s/%(STAGE_NAME)s/%(OUTPUT_BASE_FILE_NAME)s_%(REF_SBNDCODE)s.caf.root
TFILENAME=hist-%(OUTPUT_BASE_FILE_NAME)s.root
args=%(STDARGS_SBNDCODE_CAFS)s --input-file %(INPUT_STREAM)s --reference-files %(REFERENCE_FILES)s --extra-options --TFileName,%(TFILENAME)s
parse_art_output=True
output1=%(TFILENAME)s

[test single_anatree_quick_test_sbndcode]
# no reference art ROOT output for this one, but we have analysis tree reference (the "--extra-function" option)
# (we use the reference file from sequence explicitly here)
# 
# TODO comparisons with references should happen in a different way, with the "C.I. validation tests" (ask the C.I. crew!)
# 
STAGE_NAME=anatree
INPUT_STAGE_NAME=reco2
NEVENTS=2
# calibrated on sbndbuild01.fnal.gov on 20180305
cpu_usage_range=80:200
mem_usage_range=1000000:3000000

script=%(EXPSCRIPT_SBNDCODE)s
FHiCL_FILE=%(CI_FHICL_PREFIX_SBNDCODE)ssingle_%(STAGE_NAME)s_quick_test_sbndcode.fcl
INPUT_BASE_FILE_NAME=single_%(INPUT_STAGE_NAME)s_test_sbndcode
OUTPUT_BASE_FILE_NAME=single_%(STAGE_NAME)s_test_sbndcode
EXTRA_DIR=%(SINGLE_INPUT_DIRNAME_SBNDCODE)s
INPUT_STREAM=%(XROOTD_INPUTFILEDIR_SBNDCODE)s/%(EXTRA_DIR)s/%(INPUT_STAGE_NAME)s/%(INPUT_BASE_FILE_NAME)s_%(REF_SBNDCODE)s.root
# disable the first actual product test; seeing this, the C.I. will disable also all the following ones;
# note that the INI parsing makes sure that this chacge is "backward propagated" to the value of TESTMASK_SBNDCODE for this test
CHECK_PRODUCTS_SBNDCODE=0
TFILENAME=hist-%(OUTPUT_BASE_FILE_NAME)s.root
args=%(STDARGS_NOOUTPUT_SBNDCODE)s --input-file %(INPUT_STREAM)s --extra-options --TFileName,%(TFILENAME)s
parse_art_output=True
output1=%(TFILENAME)s



[suite single_quick_test_sbndcode]
testlist=single_gen_quick_test_sbndcode single_g4_quick_test_sbndcode single_detsim_quick_test_sbndcode single_reco1_quick_test_sbndcode single_reco2_quick_test_sbndcode single_caf_quick_test_sbndcode



##############################
#  [2.2] Single particle tests: sequential tests
# ================================================
#
# This test simulates a full "standard" simulation + reconstruction chain.
# Due to its sequential nature, this test is expected to be the longest.
# It is recommended that the whole test be kept under 10 minutes run-time
# (wall clock), 3 minutes or less recommended, not to challenge the endurance
# of the impatient tester.
# 
# The resource usage upper limit has a marker feature (upper limit ending with
# `2`) just to facilitate the connection between the messages of `test_runner`
# on resource usage excess with the test that causes it (it's clearer to run it
# with `-s` option though).
#

[test single_gen_seq_test_sbndcode]
STAGE_NAME=gen
NEVENTS=%(NEVENTS_SEQ_SINGLE_SBNDCODE)s
# calibrated on sbndbuild01.fnal.gov on 20180305
cpu_usage_range=10:102
mem_usage_range=500000:700000

script=%(EXPSCRIPT_SBNDCODE)s

FHiCL_FILE=%(CI_FHICL_PREFIX_SBNDCODE)ssingle_%(STAGE_NAME)s_seq_test_sbndcode.fcl
OUTPUT_BASE_FILE_NAME=single_%(STAGE_NAME)s_test_sbndcode
EXTRA_DIR=%(SINGLE_INPUT_DIRNAME_SBNDCODE)s
INPUT_STREAM=%(XROOTD_BASEFILEDIR_SBNDCODE)s/input/empty/EmptyEvents_01.root
OUTPUT_STREAM=%(OUTPUT_BASE_FILE_NAME)s_%(CUR_SBNDCODE)s.root
REFERENCE_FILES=%(XROOTD_REFERENCEFILEDIR_SBNDCODE)s/%(EXTRA_DIR)s/%(STAGE_NAME)s/%(OUTPUT_BASE_FILE_NAME)s_%(REF_SBNDCODE)s.root
TFILENAME=hist-%(OUTPUT_BASE_FILE_NAME)s.root
args=%(STDARGS_SBNDCODE)s --input-file %(INPUT_STREAM)s --reference-files %(REFERENCE_FILES)s --extra-options --TFileName,%(TFILENAME)s
parse_art_output=True
output1=%(TFILENAME)s


[test single_g4_seq_test_sbndcode]
STAGE_NAME=g4
INPUT_STAGE_NAME=gen
NEVENTS=%(NEVENTS_SEQ_SINGLE_SBNDCODE)s
# calibrated on sbndbuild01.fnal.gov on 20180305
cpu_usage_range=1200:1600
mem_usage_range=3500000:4500000

script=%(EXPSCRIPT_SBNDCODE)s
requires=single_%(INPUT_STAGE_NAME)s_seq_test_sbndcode
FHiCL_FILE=%(CI_FHICL_PREFIX_SBNDCODE)ssingle_%(STAGE_NAME)s_seq_test_sbndcode.fcl
INPUT_BASE_FILE_NAME=single_%(INPUT_STAGE_NAME)s_test_sbndcode
OUTPUT_BASE_FILE_NAME=single_%(STAGE_NAME)s_test_sbndcode
EXTRA_DIR=%(SINGLE_INPUT_DIRNAME_SBNDCODE)s
INPUT_STREAM=../%(requires)s/%(INPUT_BASE_FILE_NAME)s_%(CUR_SBNDCODE)s.root
OUTPUT_STREAM=%(OUTPUT_BASE_FILE_NAME)s_%(CUR_SBNDCODE)s.root
REFERENCE_FILES=%(XROOTD_REFERENCEFILEDIR_SBNDCODE)s/%(EXTRA_DIR)s/%(STAGE_NAME)s/%(OUTPUT_BASE_FILE_NAME)s_%(REF_SBNDCODE)s.root
TFILENAME=hist-%(OUTPUT_BASE_FILE_NAME)s.root
args=%(STDARGS_SBNDCODE)s --input-file %(INPUT_STREAM)s --reference-files %(REFERENCE_FILES)s --extra-options --TFileName,%(TFILENAME)s
parse_art_output=True
output1=%(TFILENAME)s


[test single_detsim_seq_test_sbndcode]
STAGE_NAME=detsim
INPUT_STAGE_NAME=g4
NEVENTS=%(NEVENTS_SEQ_SINGLE_SBNDCODE)s
# calibrated on sbndbuild01.fnal.gov on 20180305
cpu_usage_range=1050:1200
mem_usage_range=3000000:4500000

script=%(EXPSCRIPT_SBNDCODE)s
requires=single_%(INPUT_STAGE_NAME)s_seq_test_sbndcode
FHiCL_FILE=%(CI_FHICL_PREFIX_SBNDCODE)ssingle_%(STAGE_NAME)s_seq_test_sbndcode.fcl
INPUT_BASE_FILE_NAME=single_%(INPUT_STAGE_NAME)s_test_sbndcode
OUTPUT_BASE_FILE_NAME=single_%(STAGE_NAME)s_test_sbndcode
EXTRA_DIR=%(SINGLE_INPUT_DIRNAME_SBNDCODE)s
INPUT_STREAM=../%(requires)s/%(INPUT_BASE_FILE_NAME)s_%(CUR_SBNDCODE)s.root
OUTPUT_STREAM=%(OUTPUT_BASE_FILE_NAME)s_%(CUR_SBNDCODE)s.root
REFERENCE_FILES=%(XROOTD_REFERENCEFILEDIR_SBNDCODE)s/%(EXTRA_DIR)s/%(STAGE_NAME)s/%(OUTPUT_BASE_FILE_NAME)s_%(REF_SBNDCODE)s.root
TFILENAME=hist-%(OUTPUT_BASE_FILE_NAME)s.root
args=%(STDARGS_SBNDCODE)s --input-file %(INPUT_STREAM)s --reference-files %(REFERENCE_FILES)s --extra-options --TFileName,%(TFILENAME)s
parse_art_output=True
output1=%(TFILENAME)s


[test single_reco1_seq_test_sbndcode]
STAGE_NAME=reco1
INPUT_STAGE_NAME=detsim
NEVENTS=%(NEVENTS_SEQ_SINGLE_SBNDCODE)s
# calibrated on sbndbuild01.fnal.gov on 20180306
cpu_usage_range=300:450
mem_usage_range=2500000:4000000

script=%(EXPSCRIPT_SBNDCODE)s
requires=single_%(INPUT_STAGE_NAME)s_seq_test_sbndcode
FHiCL_FILE=%(CI_FHICL_PREFIX_SBNDCODE)ssingle_%(STAGE_NAME)s_seq_test_sbndcode.fcl
INPUT_BASE_FILE_NAME=single_%(INPUT_STAGE_NAME)s_test_sbndcode
OUTPUT_BASE_FILE_NAME=single_%(STAGE_NAME)s_test_sbndcode
EXTRA_DIR=%(SINGLE_INPUT_DIRNAME_SBNDCODE)s
INPUT_STREAM=../%(requires)s/%(INPUT_BASE_FILE_NAME)s_%(CUR_SBNDCODE)s.root
OUTPUT_STREAM=%(OUTPUT_BASE_FILE_NAME)s_%(CUR_SBNDCODE)s.root
REFERENCE_FILES=%(XROOTD_REFERENCEFILEDIR_SBNDCODE)s/%(EXTRA_DIR)s/%(STAGE_NAME)s/%(OUTPUT_BASE_FILE_NAME)s_%(REF_SBNDCODE)s.root
TFILENAME=hist-%(OUTPUT_BASE_FILE_NAME)s.root
args=%(STDARGS_SBNDCODE)s --input-file %(INPUT_STREAM)s --reference-files %(REFERENCE_FILES)s --extra-options --TFileName,%(TFILENAME)s
parse_art_output=True
output1=%(TFILENAME)s


[test single_reco2_seq_test_sbndcode]
STAGE_NAME=reco2
INPUT_STAGE_NAME=reco1
NEVENTS=%(NEVENTS_SEQ_SINGLE_SBNDCODE)s
# calibrated on sbndbuild01.fnal.gov on 20180306
cpu_usage_range=1900:2200
mem_usage_range=2000000:3500000

script=%(EXPSCRIPT_SBNDCODE)s
requires=single_%(INPUT_STAGE_NAME)s_seq_test_sbndcode
FHiCL_FILE=%(CI_FHICL_PREFIX_SBNDCODE)ssingle_%(STAGE_NAME)s_seq_test_sbndcode.fcl
INPUT_BASE_FILE_NAME=single_%(INPUT_STAGE_NAME)s_test_sbndcode
OUTPUT_BASE_FILE_NAME=single_%(STAGE_NAME)s_test_sbndcode
EXTRA_DIR=%(SINGLE_INPUT_DIRNAME_SBNDCODE)s
INPUT_STREAM=../%(requires)s/%(INPUT_BASE_FILE_NAME)s_%(CUR_SBNDCODE)s.root
OUTPUT_STREAM=%(OUTPUT_BASE_FILE_NAME)s_%(CUR_SBNDCODE)s.root
REFERENCE_FILES=%(XROOTD_REFERENCEFILEDIR_SBNDCODE)s/%(EXTRA_DIR)s/%(STAGE_NAME)s/%(OUTPUT_BASE_FILE_NAME)s_%(REF_SBNDCODE)s.root
TFILENAME=hist-%(OUTPUT_BASE_FILE_NAME)s.root
args=%(STDARGS_SBNDCODE)s --input-file %(INPUT_STREAM)s --reference-files %(REFERENCE_FILES)s --extra-options --TFileName,%(TFILENAME)s
parse_art_output=True
output1=%(TFILENAME)s

[test single_caf_seq_test_sbndcode]
STAGE_NAME=caf
INPUT_STAGE_NAME=reco2
NEVENTS=%(NEVENTS_SEQ_SINGLE_SBNDCODE)s
# calibrated on sbndbuild01.fnal.gov on 20180306
cpu_usage_range=80:150
mem_usage_range=2500000:3500000

script=%(EXPSCRIPT_SBNDCODE)s
requires=single_%(INPUT_STAGE_NAME)s_seq_test_sbndcode
FHiCL_FILE=%(CI_FHICL_PREFIX_SBNDCODE)ssingle_%(STAGE_NAME)s_seq_test_sbndcode.fcl
INPUT_BASE_FILE_NAME=single_%(INPUT_STAGE_NAME)s_test_sbndcode
OUTPUT_BASE_FILE_NAME=single_%(STAGE_NAME)s_test_sbndcode
EXTRA_DIR=%(SINGLE_INPUT_DIRNAME_SBNDCODE)s
INPUT_STREAM=../%(requires)s/%(INPUT_BASE_FILE_NAME)s_%(CUR_SBNDCODE)s.root
OUTPUT_STREAM=%(OUTPUT_BASE_FILE_NAME)s_%(CUR_SBNDCODE)s.caf.root
REFERENCE_FILES=%(XROOTD_REFERENCEFILEDIR_SBNDCODE)s/%(EXTRA_DIR)s/%(STAGE_NAME)s/%(OUTPUT_BASE_FILE_NAME)s_%(REF_SBNDCODE)s.caf.root
TFILENAME=hist-%(OUTPUT_BASE_FILE_NAME)s.root
args=%(STDARGS_SBNDCODE_CAFS)s --input-file %(INPUT_STREAM)s --reference-files %(REFERENCE_FILES)s --extra-options --TFileName,%(TFILENAME)s --extra-function rename_file,%(OUTPUT_BASE_FILE_NAME)s_Current.caf.root,%(OUTPUT_STREAM)s
parse_art_output=True
output1=%(TFILENAME)s


[test single_anatree_seq_test_sbndcode]
# no reference art ROOT output for this one, but we have analysis tree reference (the "--extra-function" option)
# 
# See the comment on the quick test for the validation.
# 
STAGE_NAME=anatree
INPUT_STAGE_NAME=reco2
NEVENTS=%(NEVENTS_SEQ_SINGLE_SBNDCODE)s
# calibrated on sbndbuild01.fnal.gov on 20180305
cpu_usage_range=10:102
mem_usage_range=200000:600002

script=%(EXPSCRIPT_SBNDCODE)s
requires=single_%(INPUT_STAGE_NAME)s_seq_test_sbndcode
FHiCL_FILE=%(CI_FHICL_PREFIX_SBNDCODE)ssingle_%(STAGE_NAME)s_seq_test_sbndcode.fcl
INPUT_BASE_FILE_NAME=single_%(INPUT_STAGE_NAME)s_test_sbndcode
OUTPUT_BASE_FILE_NAME=single_%(STAGE_NAME)s_test_sbndcode
EXTRA_DIR=%(SINGLE_INPUT_DIRNAME_SBNDCODE)s
INPUT_STREAM=../%(requires)s/%(INPUT_BASE_FILE_NAME)s_%(CUR_SBNDCODE)s.root
CHECK_PRODUCTS_SBNDCODE=0 ; see single_anatree_quick_test_sbndcode
TFILENAME=hist-%(OUTPUT_BASE_FILE_NAME)s.root
args=%(STDARGS_NOOUTPUT_SBNDCODE)s --input-file %(INPUT_STREAM)s --extra-options --TFileName,%(TFILENAME)s
parse_art_output=True
output1=%(TFILENAME)s



[suite single_seq_test_sbndcode]
testlist=single_gen_seq_test_sbndcode single_g4_seq_test_sbndcode single_detsim_seq_test_sbndcode single_reco1_seq_test_sbndcode single_reco2_seq_test_sbndcode single_caf_seq_test_sbndcode

[suite generate_reference_single_test_sbndcode]
testlist=single_seq_test_sbndcode



################################################################################
#  [3] Data-like events: neutrino and cosmic background tests
###############################################################
#
# This test simulates a "standard" simulation + reconstruction chain
# on a generated event with a neutrino interaction (GENIE) and cosmic ray
# background (Corsika).
# 
# 
#  [3.1] Data-like events: quick tests
# ===========================================
# 
# These tests are of "quick" type.
# 
# The resource usage upper limit has a marker feature (upper limit ending with
# `3`) just to facilitate the connection between the messages of `test_runner`
# on resource usage excess with the test that causes it (it's clearer to run it
# with `-s` option though).
#

[test nucosmics_gen_quick_test_sbndcode]
STAGE_NAME=gen
NEVENTS=5
# calibrated on sbndbuild01.fnal.gov on 20180305
cpu_usage_range=400:1500
mem_usage_range=1000000:3000000

script=%(EXPSCRIPT_SBNDCODE)s
FHiCL_FILE=%(CI_FHICL_PREFIX_SBNDCODE)snucosmics_%(STAGE_NAME)s_quick_test_sbndcode.fcl
OUTPUT_BASE_FILE_NAME=nucosmics_%(STAGE_NAME)s_test_sbndcode
EXTRA_DIR=%(NUCOSMICS_INPUT_DIRNAME_SBNDCODE)s
INPUT_STREAM=%(XROOTD_BASEFILEDIR_SBNDCODE)s/input/empty/EmptyEvents_02.root
OUTPUT_STREAM=%(OUTPUT_BASE_FILE_NAME)s_%(CUR_SBNDCODE)s.root
REFERENCE_FILES=%(XROOTD_REFERENCEFILEDIR_SBNDCODE)s/%(EXTRA_DIR)s/%(STAGE_NAME)s/%(OUTPUT_BASE_FILE_NAME)s_%(REF_SBNDCODE)s.root
TFILENAME=hist-%(OUTPUT_BASE_FILE_NAME)s.root
args=%(STDARGS_SBNDCODE)s --input-file %(INPUT_STREAM)s --reference-files %(REFERENCE_FILES)s --extra-options --TFileName,%(TFILENAME)s
parse_art_output=True
output1=%(TFILENAME)s


[test nucosmics_g4_quick_test_sbndcode]
STAGE_NAME=g4
INPUT_STAGE_NAME=gen
NEVENTS=2
# calibrated on sbndbuild01.fnal.gov on 20180305
cpu_usage_range=400:18003
mem_usage_range=3200000:5000000

script=%(EXPSCRIPT_SBNDCODE)s
FHiCL_FILE=%(CI_FHICL_PREFIX_SBNDCODE)snucosmics_%(STAGE_NAME)s_quick_test_sbndcode.fcl
INPUT_BASE_FILE_NAME=nucosmics_%(INPUT_STAGE_NAME)s_test_sbndcode
OUTPUT_BASE_FILE_NAME=nucosmics_%(STAGE_NAME)s_test_sbndcode
EXTRA_DIR=%(NUCOSMICS_INPUT_DIRNAME_SBNDCODE)s
INPUT_STREAM=%(XROOTD_INPUTFILEDIR_SBNDCODE)s/%(EXTRA_DIR)s/%(INPUT_STAGE_NAME)s/%(INPUT_BASE_FILE_NAME)s_%(REF_SBNDCODE)s.root
OUTPUT_STREAM=%(OUTPUT_BASE_FILE_NAME)s_%(CUR_SBNDCODE)s.root
REFERENCE_FILES=%(XROOTD_REFERENCEFILEDIR_SBNDCODE)s/%(EXTRA_DIR)s/%(STAGE_NAME)s/%(OUTPUT_BASE_FILE_NAME)s_%(REF_SBNDCODE)s.root
TFILENAME=hist-%(OUTPUT_BASE_FILE_NAME)s.root
args=%(STDARGS_SBNDCODE)s --input-file %(INPUT_STREAM)s --reference-files %(REFERENCE_FILES)s --extra-options --TFileName,%(TFILENAME)s
parse_art_output=True
output1=%(TFILENAME)s


[test nucosmics_detsim_quick_test_sbndcode]
STAGE_NAME=detsim
INPUT_STAGE_NAME=g4
NEVENTS=2
# calibrated on sbndbuild01.fnal.gov on 20180305
cpu_usage_range=1400:2300
mem_usage_range=1000000:3000000

script=%(EXPSCRIPT_SBNDCODE)s
FHiCL_FILE=%(CI_FHICL_PREFIX_SBNDCODE)snucosmics_%(STAGE_NAME)s_quick_test_sbndcode.fcl
INPUT_BASE_FILE_NAME=nucosmics_%(INPUT_STAGE_NAME)s_test_sbndcode
OUTPUT_BASE_FILE_NAME=nucosmics_%(STAGE_NAME)s_test_sbndcode
EXTRA_DIR=%(NUCOSMICS_INPUT_DIRNAME_SBNDCODE)s
INPUT_STREAM=%(XROOTD_INPUTFILEDIR_SBNDCODE)s/%(EXTRA_DIR)s/%(INPUT_STAGE_NAME)s/%(INPUT_BASE_FILE_NAME)s_%(REF_SBNDCODE)s.root
OUTPUT_STREAM=%(OUTPUT_BASE_FILE_NAME)s_%(CUR_SBNDCODE)s.root
REFERENCE_FILES=%(XROOTD_REFERENCEFILEDIR_SBNDCODE)s/%(EXTRA_DIR)s/%(STAGE_NAME)s/%(OUTPUT_BASE_FILE_NAME)s_%(REF_SBNDCODE)s.root
TFILENAME=hist-%(OUTPUT_BASE_FILE_NAME)s.root
args=%(STDARGS_SBNDCODE)s --input-file %(INPUT_STREAM)s --reference-files %(REFERENCE_FILES)s --extra-options --TFileName,%(TFILENAME)s
parse_art_output=True
output1=%(TFILENAME)s


[test nucosmics_reco1_quick_test_sbndcode]
STAGE_NAME=reco1
INPUT_STAGE_NAME=detsim
NEVENTS=2
# calibrated on sbndbuild01.fnal.gov on 20180305
cpu_usage_range=300:1500
mem_usage_range=1500000:3500000

script=%(EXPSCRIPT_SBNDCODE)s
FHiCL_FILE=%(CI_FHICL_PREFIX_SBNDCODE)snucosmics_%(STAGE_NAME)s_quick_test_sbndcode.fcl
INPUT_BASE_FILE_NAME=nucosmics_%(INPUT_STAGE_NAME)s_test_sbndcode
OUTPUT_BASE_FILE_NAME=nucosmics_%(STAGE_NAME)s_test_sbndcode
EXTRA_DIR=%(NUCOSMICS_INPUT_DIRNAME_SBNDCODE)s
INPUT_STREAM=%(XROOTD_INPUTFILEDIR_SBNDCODE)s/%(EXTRA_DIR)s/%(INPUT_STAGE_NAME)s/%(INPUT_BASE_FILE_NAME)s_%(REF_SBNDCODE)s.root
OUTPUT_STREAM=%(OUTPUT_BASE_FILE_NAME)s_%(CUR_SBNDCODE)s.root
REFERENCE_FILES=%(XROOTD_REFERENCEFILEDIR_SBNDCODE)s/%(EXTRA_DIR)s/%(STAGE_NAME)s/%(OUTPUT_BASE_FILE_NAME)s_%(REF_SBNDCODE)s.root
TFILENAME=hist-%(OUTPUT_BASE_FILE_NAME)s.root
args=%(STDARGS_SBNDCODE)s --input-file %(INPUT_STREAM)s --reference-files %(REFERENCE_FILES)s --extra-options --TFileName,%(TFILENAME)s
parse_art_output=True
output1=%(TFILENAME)s


[test nucosmics_reco2_quick_test_sbndcode]
STAGE_NAME=reco2
INPUT_STAGE_NAME=reco1
NEVENTS=2
# calibrated on sbndbuild01.fnal.gov on 20180305
cpu_usage_range=150:1250
mem_usage_range=1000000:3000000

script=%(EXPSCRIPT_SBNDCODE)s
FHiCL_FILE=%(CI_FHICL_PREFIX_SBNDCODE)snucosmics_%(STAGE_NAME)s_quick_test_sbndcode.fcl
INPUT_BASE_FILE_NAME=nucosmics_%(INPUT_STAGE_NAME)s_test_sbndcode
OUTPUT_BASE_FILE_NAME=nucosmics_%(STAGE_NAME)s_test_sbndcode
EXTRA_DIR=%(NUCOSMICS_INPUT_DIRNAME_SBNDCODE)s
INPUT_STREAM=%(XROOTD_INPUTFILEDIR_SBNDCODE)s/%(EXTRA_DIR)s/%(INPUT_STAGE_NAME)s/%(INPUT_BASE_FILE_NAME)s_%(REF_SBNDCODE)s.root
OUTPUT_STREAM=%(OUTPUT_BASE_FILE_NAME)s_%(CUR_SBNDCODE)s.root
REFERENCE_FILES=%(XROOTD_REFERENCEFILEDIR_SBNDCODE)s/%(EXTRA_DIR)s/%(STAGE_NAME)s/%(OUTPUT_BASE_FILE_NAME)s_%(REF_SBNDCODE)s.root
TFILENAME=hist-%(OUTPUT_BASE_FILE_NAME)s.root
args=%(STDARGS_SBNDCODE)s --input-file %(INPUT_STREAM)s --reference-files %(REFERENCE_FILES)s --extra-options --TFileName,%(TFILENAME)s
parse_art_output=True
output1=%(TFILENAME)s

[test nucosmics_caf_quick_test_sbndcode]
STAGE_NAME=caf
INPUT_STAGE_NAME=reco2
NEVENTS=5
# calibrated on sbndbuild01.fnal.gov on 20180305
cpu_usage_range=1000:3000
mem_usage_range=1000000:3000000

script=%(EXPSCRIPT_SBNDCODE)s
FHiCL_FILE=%(CI_FHICL_PREFIX_SBNDCODE)snucosmics_%(STAGE_NAME)s_quick_test_sbndcode.fcl
INPUT_BASE_FILE_NAME=nucosmics_%(INPUT_STAGE_NAME)s_test_sbndcode
OUTPUT_BASE_FILE_NAME=nucosmics_%(STAGE_NAME)s_test_sbndcode
EXTRA_DIR=%(NUCOSMICS_INPUT_DIRNAME_SBNDCODE)s
INPUT_STREAM=%(XROOTD_INPUTFILEDIR_SBNDCODE)s/%(EXTRA_DIR)s/%(INPUT_STAGE_NAME)s/%(INPUT_BASE_FILE_NAME)s_%(REF_SBNDCODE)s.root
OUTPUT_STREAM=%(OUTPUT_BASE_FILE_NAME)s_%(CUR_SBNDCODE_CAFS)s.caf.root
REFERENCE_FILES=%(XROOTD_REFERENCEFILEDIR_SBNDCODE)s/%(EXTRA_DIR)s/%(STAGE_NAME)s/%(OUTPUT_BASE_FILE_NAME)s_%(REF_SBNDCODE)s.caf.root
TFILENAME=hist-%(OUTPUT_BASE_FILE_NAME)s.root
args=%(STDARGS_SBNDCODE_CAFS)s --input-file %(INPUT_STREAM)s --reference-files %(REFERENCE_FILES)s --extra-options --TFileName,%(TFILENAME)s
parse_art_output=True
output1=%(TFILENAME)s


[test nucosmics_anatree_quick_test_sbndcode]
# no reference art ROOT output for this one, but we have analysis tree reference (the "--extra-function" option)
# (we use the reference file from sequence explicitly here)
# 
# TODO comparisons with references should happen in a different way, with the "C.I. validation tests" (ask the C.I. crew!)
# 
STAGE_NAME=anatree
INPUT_STAGE_NAME=reco2
NEVENTS=2
# calibrated on sbndbuild01.fnal.gov on 20180305
cpu_usage_range=60:650
mem_usage_range=1600000:3000003

script=%(EXPSCRIPT_SBNDCODE)s
FHiCL_FILE=%(CI_FHICL_PREFIX_SBNDCODE)snucosmics_%(STAGE_NAME)s_quick_test_sbndcode.fcl
INPUT_BASE_FILE_NAME=nucosmics_%(INPUT_STAGE_NAME)s_test_sbndcode
OUTPUT_BASE_FILE_NAME=nucosmics_%(STAGE_NAME)s_test_sbndcode
EXTRA_DIR=%(NUCOSMICS_INPUT_DIRNAME_SBNDCODE)s
INPUT_STREAM=%(XROOTD_INPUTFILEDIR_SBNDCODE)s/%(EXTRA_DIR)s/%(INPUT_STAGE_NAME)s/%(INPUT_BASE_FILE_NAME)s_%(REF_SBNDCODE)s.root
# disable the first actual product test; seeing this, the C.I. will disable also all the following ones;
# note that the INI parsing makes sure that this chacge is "backward propagated" to the value of TESTMASK_SBNDCODE for this test
CHECK_PRODUCTS_SBNDCODE=0
TFILENAME=hist-%(OUTPUT_BASE_FILE_NAME)s.root
args=%(STDARGS_NOOUTPUT_SBNDCODE)s --input-file %(INPUT_STREAM)s --extra-options --TFileName,%(TFILENAME)s
parse_art_output=True
output1=%(TFILENAME)s



[suite nucosmics_quick_test_sbndcode]
testlist=nucosmics_gen_quick_test_sbndcode nucosmics_g4_quick_test_sbndcode nucosmics_detsim_quick_test_sbndcode nucosmics_reco1_quick_test_sbndcode nucosmics_reco2_quick_test_sbndcode nucosmics_caf_quick_test_sbndcode



###############################################################
#  [3.2] Data-like events: sequence tests
# =========================================
#
# This test simulates a full "standard" simulation + reconstruction chain.
# Due to its sequential nature, this test is expected to be the longest.
# It is recommended that the whole test be kept under 10 minutes run-time
# (wall clock), 3 minutes or less recommended, not to challenge the endurance
# of the impatient tester.
# 
# The resource usage upper limit has a marker feature (upper limit ending with
# `4`) just to facilitate the connection between the messages of `test_runner`
# on resource usage excess with the test that causes it (it's clearer to run it
# with `-s` option though).
#

[test nucosmics_gen_seq_test_sbndcode]
STAGE_NAME=gen
NEVENTS=%(NEVENTS_SEQ_NUCOSMICS_SBNDCODE)s
# calibrated on sbndbuild01.fnal.gov on 20180305
cpu_usage_range=600:900
mem_usage_range=2500000:3500000

script=%(EXPSCRIPT_SBNDCODE)s
FHiCL_FILE=%(CI_FHICL_PREFIX_SBNDCODE)snucosmics_%(STAGE_NAME)s_seq_test_sbndcode.fcl
OUTPUT_BASE_FILE_NAME=nucosmics_%(STAGE_NAME)s_test_sbndcode
EXTRA_DIR=%(NUCOSMICS_INPUT_DIRNAME_SBNDCODE)s
INPUT_STREAM=%(XROOTD_BASEFILEDIR_SBNDCODE)s/input/empty/EmptyEvents_02.root
OUTPUT_STREAM=%(OUTPUT_BASE_FILE_NAME)s_%(CUR_SBNDCODE)s.root
REFERENCE_FILES=%(XROOTD_REFERENCEFILEDIR_SBNDCODE)s/%(EXTRA_DIR)s/%(STAGE_NAME)s/%(OUTPUT_BASE_FILE_NAME)s_%(REF_SBNDCODE)s.root
TFILENAME=hist-%(OUTPUT_BASE_FILE_NAME)s.root
args=%(STDARGS_SBNDCODE)s --input-file %(INPUT_STREAM)s --reference-files %(REFERENCE_FILES)s --extra-options --TFileName,%(TFILENAME)s
parse_art_output=True
output1=%(TFILENAME)s


[test nucosmics_g4_seq_test_sbndcode]
STAGE_NAME=g4
INPUT_STAGE_NAME=gen
NEVENTS=%(NEVENTS_SEQ_NUCOSMICS_SBNDCODE)s
# calibrated on sbndbuild01.fnal.gov on 20180305
cpu_usage_range=3500:4200
mem_usage_range=4500000:5500000

script=%(EXPSCRIPT_SBNDCODE)s
requires=nucosmics_%(INPUT_STAGE_NAME)s_seq_test_sbndcode
FHiCL_FILE=%(CI_FHICL_PREFIX_SBNDCODE)snucosmics_%(STAGE_NAME)s_seq_test_sbndcode.fcl
INPUT_BASE_FILE_NAME=nucosmics_%(INPUT_STAGE_NAME)s_test_sbndcode
OUTPUT_BASE_FILE_NAME=nucosmics_%(STAGE_NAME)s_test_sbndcode
EXTRA_DIR=%(NUCOSMICS_INPUT_DIRNAME_SBNDCODE)s
INPUT_STREAM=../%(requires)s/%(INPUT_BASE_FILE_NAME)s_%(CUR_SBNDCODE)s.root
OUTPUT_STREAM=%(OUTPUT_BASE_FILE_NAME)s_%(CUR_SBNDCODE)s.root
REFERENCE_FILES=%(XROOTD_REFERENCEFILEDIR_SBNDCODE)s/%(EXTRA_DIR)s/%(STAGE_NAME)s/%(OUTPUT_BASE_FILE_NAME)s_%(REF_SBNDCODE)s.root
TFILENAME=hist-%(OUTPUT_BASE_FILE_NAME)s.root
args=%(STDARGS_SBNDCODE)s --input-file %(INPUT_STREAM)s --reference-files %(REFERENCE_FILES)s --extra-options --TFileName,%(TFILENAME)s
parse_art_output=True
output1=%(TFILENAME)s


[test nucosmics_detsim_seq_test_sbndcode]
STAGE_NAME=detsim
INPUT_STAGE_NAME=g4
NEVENTS=%(NEVENTS_SEQ_NUCOSMICS_SBNDCODE)s
# calibrated on sbndbuild01.fnal.gov on 20180305
cpu_usage_range=1100:1400
mem_usage_range=3500000:4500000

script=%(EXPSCRIPT_SBNDCODE)s
requires=nucosmics_%(INPUT_STAGE_NAME)s_seq_test_sbndcode
FHiCL_FILE=%(CI_FHICL_PREFIX_SBNDCODE)snucosmics_%(STAGE_NAME)s_seq_test_sbndcode.fcl
INPUT_BASE_FILE_NAME=nucosmics_%(INPUT_STAGE_NAME)s_test_sbndcode
OUTPUT_BASE_FILE_NAME=nucosmics_%(STAGE_NAME)s_test_sbndcode
EXTRA_DIR=%(NUCOSMICS_INPUT_DIRNAME_SBNDCODE)s
INPUT_STREAM=../%(requires)s/%(INPUT_BASE_FILE_NAME)s_%(CUR_SBNDCODE)s.root
OUTPUT_STREAM=%(OUTPUT_BASE_FILE_NAME)s_%(CUR_SBNDCODE)s.root
REFERENCE_FILES=%(XROOTD_REFERENCEFILEDIR_SBNDCODE)s/%(EXTRA_DIR)s/%(STAGE_NAME)s/%(OUTPUT_BASE_FILE_NAME)s_%(REF_SBNDCODE)s.root
TFILENAME=hist-%(OUTPUT_BASE_FILE_NAME)s.root
args=%(STDARGS_SBNDCODE)s --input-file %(INPUT_STREAM)s --reference-files %(REFERENCE_FILES)s --extra-options --TFileName,%(TFILENAME)s
parse_art_output=True
output1=%(TFILENAME)s


[test nucosmics_reco1_seq_test_sbndcode]
STAGE_NAME=reco1
INPUT_STAGE_NAME=detsim
NEVENTS=%(NEVENTS_SEQ_NUCOSMICS_SBNDCODE)s
# calibrated on sbndbuild01.fnal.gov on 20180305
cpu_usage_range=600:800
mem_usage_range=3000000:4000000

script=%(EXPSCRIPT_SBNDCODE)s
requires=nucosmics_%(INPUT_STAGE_NAME)s_seq_test_sbndcode
FHiCL_FILE=%(CI_FHICL_PREFIX_SBNDCODE)snucosmics_%(STAGE_NAME)s_seq_test_sbndcode.fcl
INPUT_BASE_FILE_NAME=nucosmics_%(INPUT_STAGE_NAME)s_test_sbndcode
OUTPUT_BASE_FILE_NAME=nucosmics_%(STAGE_NAME)s_test_sbndcode
EXTRA_DIR=%(NUCOSMICS_INPUT_DIRNAME_SBNDCODE)s
INPUT_STREAM=../%(requires)s/%(INPUT_BASE_FILE_NAME)s_%(CUR_SBNDCODE)s.root
OUTPUT_STREAM=%(OUTPUT_BASE_FILE_NAME)s_%(CUR_SBNDCODE)s.root
REFERENCE_FILES=%(XROOTD_REFERENCEFILEDIR_SBNDCODE)s/%(EXTRA_DIR)s/%(STAGE_NAME)s/%(OUTPUT_BASE_FILE_NAME)s_%(REF_SBNDCODE)s.root
TFILENAME=hist-%(OUTPUT_BASE_FILE_NAME)s.root
args=%(STDARGS_SBNDCODE)s --input-file %(INPUT_STREAM)s --reference-files %(REFERENCE_FILES)s --extra-options --TFileName,%(TFILENAME)s
parse_art_output=True
output1=%(TFILENAME)s


[test nucosmics_reco2_seq_test_sbndcode]
STAGE_NAME=reco2
INPUT_STAGE_NAME=reco1
NEVENTS=%(NEVENTS_SEQ_NUCOSMICS_SBNDCODE)s
# calibrated on sbndbuild01.fnal.gov on 20180305
cpu_usage_range=2200:2500
mem_usage_range=2500000:3500000

script=%(EXPSCRIPT_SBNDCODE)s
requires=nucosmics_%(INPUT_STAGE_NAME)s_seq_test_sbndcode
FHiCL_FILE=%(CI_FHICL_PREFIX_SBNDCODE)snucosmics_%(STAGE_NAME)s_seq_test_sbndcode.fcl
INPUT_BASE_FILE_NAME=nucosmics_%(INPUT_STAGE_NAME)s_test_sbndcode
OUTPUT_BASE_FILE_NAME=nucosmics_%(STAGE_NAME)s_test_sbndcode
EXTRA_DIR=%(NUCOSMICS_INPUT_DIRNAME_SBNDCODE)s
INPUT_STREAM=../%(requires)s/%(INPUT_BASE_FILE_NAME)s_%(CUR_SBNDCODE)s.root
OUTPUT_STREAM=%(OUTPUT_BASE_FILE_NAME)s_%(CUR_SBNDCODE)s.root
REFERENCE_FILES=%(XROOTD_REFERENCEFILEDIR_SBNDCODE)s/%(EXTRA_DIR)s/%(STAGE_NAME)s/%(OUTPUT_BASE_FILE_NAME)s_%(REF_SBNDCODE)s.root
TFILENAME=hist-%(OUTPUT_BASE_FILE_NAME)s.root
args=%(STDARGS_SBNDCODE)s --input-file %(INPUT_STREAM)s --reference-files %(REFERENCE_FILES)s --extra-options --TFileName,%(TFILENAME)s
parse_art_output=True
output1=%(TFILENAME)s

[test nucosmics_caf_seq_test_sbndcode]
STAGE_NAME=caf
INPUT_STAGE_NAME=reco2
NEVENTS=%(NEVENTS_SEQ_NUCOSMICS_SBNDCODE)s
# calibrated on sbndbuild01.fnal.gov on 20180305
cpu_usage_range=3300:4300
mem_usage_range=3000000:5000000

script=%(EXPSCRIPT_SBNDCODE)s
requires=nucosmics_%(INPUT_STAGE_NAME)s_seq_test_sbndcode
FHiCL_FILE=%(CI_FHICL_PREFIX_SBNDCODE)snucosmics_%(STAGE_NAME)s_seq_test_sbndcode.fcl
INPUT_BASE_FILE_NAME=nucosmics_%(INPUT_STAGE_NAME)s_test_sbndcode
OUTPUT_BASE_FILE_NAME=nucosmics_%(STAGE_NAME)s_test_sbndcode
EXTRA_DIR=%(NUCOSMICS_INPUT_DIRNAME_SBNDCODE)s
INPUT_STREAM=../%(requires)s/%(INPUT_BASE_FILE_NAME)s_%(CUR_SBNDCODE)s.root
OUTPUT_STREAM=%(OUTPUT_BASE_FILE_NAME)s_%(CUR_SBNDCODE)s.caf.root
REFERENCE_FILES=%(XROOTD_REFERENCEFILEDIR_SBNDCODE)s/%(EXTRA_DIR)s/%(STAGE_NAME)s/%(OUTPUT_BASE_FILE_NAME)s_%(REF_SBNDCODE)s.caf.root
TFILENAME=hist-%(OUTPUT_BASE_FILE_NAME)s.root
args=%(STDARGS_SBNDCODE_CAFS)s --input-file %(INPUT_STREAM)s --reference-files %(REFERENCE_FILES)s --extra-options --TFileName,%(TFILENAME)s --extra-function rename_file,%(OUTPUT_BASE_FILE_NAME)s_Current.caf.root,%(OUTPUT_STREAM)s
parse_art_output=True
output1=%(TFILENAME)s


[test nucosmics_anatree_seq_test_sbndcode]
# no reference art ROOT output for this one, but we have analysis tree reference (the "--extra-function" option)
# 
# See the comment on the quick test for the validation.
# 
STAGE_NAME=anatree
INPUT_STAGE_NAME=reco2
NEVENTS=%(NEVENTS_SEQ_NUCOSMICS_SBNDCODE)s
# calibrated on sbndbuild01.fnal.gov on 20180305
cpu_usage_range=60:650
mem_usage_range=600000:1400003

script=%(EXPSCRIPT_SBNDCODE)s
requires=nucosmics_%(INPUT_STAGE_NAME)s_seq_test_sbndcode
FHiCL_FILE=%(CI_FHICL_PREFIX_SBNDCODE)snucosmics_%(STAGE_NAME)s_seq_test_sbndcode.fcl
INPUT_BASE_FILE_NAME=nucosmics_%(INPUT_STAGE_NAME)s_test_sbndcode
OUTPUT_BASE_FILE_NAME=nucosmics_%(STAGE_NAME)s_test_sbndcode
EXTRA_DIR=%(NUCOSMICS_INPUT_DIRNAME_SBNDCODE)s
INPUT_STREAM=../%(requires)s/%(INPUT_BASE_FILE_NAME)s_%(CUR_SBNDCODE)s.root
CHECK_PRODUCTS_SBNDCODE=0 ; see nucosmics_anatree_quick_test_sbndcode
TFILENAME=hist-%(OUTPUT_BASE_FILE_NAME)s.root
args=%(STDARGS_NOOUTPUT_SBNDCODE)s --input-file %(INPUT_STREAM)s --extra-options --TFileName,%(TFILENAME)s
parse_art_output=True
output1=%(TFILENAME)s



[suite nucosmics_seq_test_sbndcode]
testlist=nucosmics_gen_seq_test_sbndcode nucosmics_g4_seq_test_sbndcode nucosmics_detsim_seq_test_sbndcode nucosmics_reco1_seq_test_sbndcode nucosmics_reco2_seq_test_sbndcode nucosmics_caf_seq_test_sbndcode

[suite generate_reference_nucosmics_test_sbndcode]
testlist=nucosmics_seq_test_sbndcode



################################################################################
#  [4] Tests with gallery
#######################################
#  [4.1] Compilation tests
# ------------------------------------------------------------------------------
#

[test compilation_test_sbndcode]

cpu_usage_range=0:250
mem_usage_range=10000:800000
script=${SBNDCODE_DIR}/test/compileGalleryAnalysis.sh
parse_art_output=False


[suite gallery_test_sbndcode]
testlist=compilation_test_sbndcode



################################################################################
#  [5] other tests
#######################################
#  [5.1] fcl file checks
# ------------------------------------------------------------------------------
#

[test fcl_checks_sbndcode]
cpu_usage_range=0:100
mem_usage_range=10000:50000
script=${SBNDCODE_DIR}/test/fcl_checks.sh
STAGE_NAME=fcl
EXTRA_DIR=%(FCLCHECK_INPUT_DIRNAME_SBNDCODE)s
INPUT_STREAM=fhicl_dump_%(REF_SBNDCODE)s.tgz
args=--refdir %(BASEFILEDIR_SBNDCODE)s/reference/standard/fcl --input-file %(INPUT_STREAM)s
parse_art_output=False

[test update_refs_fcl_checks_sbndcode]
cpu_usage_range=0:100
mem_usage_range=10000:50000
script=${SBNDCODE_DIR}/test/fcl_checks.sh
STAGE_NAME=fcl
EXTRA_DIR=%(FCLCHECK_INPUT_DIRNAME_SBNDCODE)s
INPUT_STREAM=fhicl_dump_Reference.tgz
OUTPUT_STREAM=fhicl_dump_%(CUR_SBNDCODE)s.tgz
args=--refdir %(BASEFILEDIR_SBNDCODE)s/reference/standard/fcl --output-file %(OUTPUT_STREAM)s --input-file %(INPUT_STREAM)s
parse_art_output=False


################################################################################
#  [A] Special suite definitions for continuous integration framework (`lar_ci`)
#######################################
#  [A.1] Experiment suite definitions
# ------------------------------------------------------------------------------
#
# These test suites are defined by SBND for our own purpose
#

###
### Test suite recommended to be run by developers before every push
# 
# This suite is supposed to be "fast", returning a response in less than 10'.
# 
# Includes single particle and data-like.
# 
[suite develop_test_sbndcode]
testlist=single_quick_test_sbndcode nucosmics_quick_test_sbndcode gallery_test_sbndcode fcl_checks_sbndcode


### 
### Test suite recommended to be run on every push, unless changes are designed
### to be localised.
# 
# A change in physics of a reconstruction algorithm is *not* localised, as it is
# not localised a change in the implementation of a reconstruction algorithm.
# Neither it is localised a change in a service or reconstruction module
# configuration.
#
[suite complete_test_sbndcode]
testlist=develop_test_sbndcode single_seq_test_sbndcode nucosmics_seq_test_sbndcode fcl_checks_sbndcode


###
### Generate all the reference files.
#
[suite generate_reference_sbndcode]
testlist=generate_reference_single_test_sbndcode generate_reference_nucosmics_test_sbndcode update_refs_fcl_checks_sbndcode

###
### All tests
#
# This suite is intended mainly to "test the tests", and may include redundant tests.
#
[suite all_tests_sbndcode]
testlist=single_quick_test_sbndcode nucosmics_quick_test_sbndcode single_seq_test_sbndcode nucosmics_seq_test_sbndcode gallery_test_sbndcode fcl_checks_sbndcode


#############################################################
#  [A.2] Continuous integration framework suite definitions
# -----------------------------------------------------------

# the `quick_test_<CI_EXP_CODE>` tests are run by the continuous integration default trigger
[suite quick_test_sbndcode]
testlist=develop_test_sbndcode

# the `seq_test_<CI_EXP_CODE>` tests are run by the continuous integration to generate reference files
[suite seq_test_sbndcode]
testlist=generate_reference_sbndcode

