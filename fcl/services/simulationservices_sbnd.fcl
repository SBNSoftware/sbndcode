#include "simulationservices.fcl"
#include "backtrackerservice.fcl"
#include "photonbacktrackerservice.fcl"

BEGIN_PROLOG

#
# Configuration for LArG4Parameters service
#
# Use as:
#
#     service.LArG4Parmeters: @local::sbnd_largeantparameters
#
#
sbnd_largeantparameters: {

    OpticalSimVerbosity:      0       #verbosity of optical simulation, soon to be depricated
    ParticleKineticEnergyCut: 0.01e-3  #in GeV
    StoreTrajectories:        true
    VisualizationEnergyCut:   10.e-3  #depricated, in GeV
    VisualizeNeutrals:        false   #depricated
    ModifyProtonCut:          false   #Whether to modify the default proton cut
    NewProtonCut:             0.0     #new ProtonCut value, ModifyProtonCut must be set to set new value
    KeepEMShowerDaughters:    false    #Don't save secondary, tertiary, etc particles in EM showers
    LongitudinalDiffusion:    4.0e-9  #in cm^2/ns
    TransverseDiffusion:      8.8e-9  #in cm^2/ns
    ElectronClusterSize:      20.0    #number of ionization electrons to drift in a unit
    MinNumberOfElCluster:     0       #minimum number of electron clusters
    UseCustomPhysics:         true    # use the `EnabledPhysics` list of processes:
    EnabledPhysics:           [ "Em", "SynchrotronAndGN", "Ion", "Hadron",
                                "Decay", "HadronElastic", "Stopping"
                                , "FastOptical"           # either: use photon library
                                # , OpFastScintillation   #     or: let Geant4 do the work (for photon visibility library generation)
                                # , "NeutronTrackingCut"  # if NeutronTrackingCut is enabled, neutrons will be cut
                              ]
    CosmogenicK0Bias:         0 # 0 is off. N is the number of secondaries to produce.
    CosmogenicXSMNBiasOn:     0 # 0 is off. 1 works. 2 still in development.
    CosmogenicXSMNBiasFactor: 1 # Not more than 5-ish cuz of numerical instabilities.
    DisableWireplanes:        false #if set true, charge drift simulation does not run - used for optical sim jobs OR just when you don't wanna drift the e's.
    SkipWireSignalInTPCs:     []     # put here TPC id's which should not receive ionization electrons - used to simulate TPC geom volumes which are actually dead LAr volumes in protoDUNE
    FillSimEnergyDeposits:    true
    UseModBoxRecomb:          true   # use Modified Box recombination instead of Birks
    UseModLarqlRecomb:        true   # use LArQL recombination corrections (dependence on EF)
   
    #* Recombination factor coefficients come from Nucl.Instrum.Meth.A523:275-286,2004
    #* * @f$ dE/dx @f$ is given by the voxel energy deposition, but have to convert it to MeV/cm from GeV/voxel width
    #* * electric field: @f$ E @f$ in kV/cm
    #* * @f$ R = A/(1 + (dE/dx)*k/E) @f$
    #* * @f$ A = 0.800 \pm 0.003 @f$
    #* * @f$ k = 0.0486 @f$ needs to be scaled with Electric field
    RecombA: 0.800      #< _A_ constant.
    Recombk: 0.0486     #< _k_ constant, in g/(MeV cm&sup2;)*kV/cm.
   
    #* Recombination factor coefficients come from Nucl.Instrum.Meth.A523:275-286,2004
    #* * @f$ dE/dx @f$ is given by the voxel energy deposition, but have to convert it to MeV/cm from GeV/voxel width
    #* * electric field: @f$ E @f$ in kV/cm
    #* * `kModBoxB` needs to be scaled with the electric field.
    ModBoxA: 0.930
    ModBoxB: 0.212
   
    #* Recombination factor coefficients for LArQL can be found in https://cdcvs.fnal.gov/redmine/projects/larsoft/wiki/LArQL_algorithm
    #* * @f$ dE/dx @f$ is given by the energy deposition in MeV/cm
    #* * electric field: @f$ E @f$ in kV/cm
    LarqlChi0A: 0.00338427
    LarqlChi0B: -6.57037
    LarqlChi0C: 1.88418
    LarqlChi0D: 0.000129379
    LarqlAlpha: 0.0372
    LarqlBeta: 0.0124
    
    #* ion+excitation work function in eV
    #* https://doi.org/10.1016/0168-9002(90)90011-T
    Wph: 19.5
 
    # adopt the "correlated" model for ionization and scintillation (SBN DocDB 17964)
    IonAndScintCalculator: "Correlated"
    # this enables some improvements on top of the correlated model
    # (LArQL, using the parameters above; see SBN DocDB 21270)
    # UseModLarqlRecomb: true

    # The following parameters specify details of wireplanes or similar
    #  areas with optically parameterized transmissions (Ben J 2013)
    #  volume names to be associated with an optical wireplane model
    OpticalParamVolumes:      ["volTPCPlaneVert_PV"]

    #  specification of which model to use for each volume
    OpticalParamModels:       ["OverlaidWireplanes"]

    # orientation of each wireplane set
    #  0 = Xdrift, 1 = Ydrift, 2 = Zdrift
    OpticalParamOrientations: [0]

    # This a set of floats which is specific to the particular model used.
    # For overlaid wireplanes, should be a vector of vectors of
    #                                 [plane angle, pitch/mm, wire diameter/mm]
    #
    # This format is chosen to allow for future extensions to the model
    #  for, eg, DUNE wireplane development.
    #
    OpticalParamParameters:   [ [ [ 60, 3, 0.15],
                                  [-60, 3, 0.15],
                                  [  0, 3, 0.15] ] ]
    UseLitePhotons: false

    
}


#
# SBND LArVoxelCalculator service configuration.
#
# Use as:
#
#     services.LArVoxelCalculator: @local::sbnd_larvoxelcalculator
#
#
sbnd_larvoxelcalculator: {
    VoxelSizeX:     0.03    #in cm
    VoxelSizeY:     0.03    #in cm
    VoxelSizeZ:     0.03    #in cm
    VoxelSizeT:     5000.0  #in ns
    VoxelOffsetX:   0.0     #in cm
    VoxelOffsetY:   0.0     #in cm
    VoxelOffsetZ:   0.0     #in cm
    VoxelOffsetT:   -2500.0 #in ns
    VoxelEnergyCut: 1.e-6   #in GeV
}



#
# Backtracking services
#
# All serviced needed for service-driven backtracking
# Use as:
#
# services: {
#   ...
#   @table::sbnd_backtracking_services
#   ...
# }
#
sbnd_backtracking_services: {
    BackTrackerService:         @local::standard_backtrackerservice       # from `backtrackerservice.fcl` (`larsim`)
    PhotonBackTrackerService:   @local::standard_photonbacktrackerservice # from `photonbacktrackerservice.fcl` (`larsim`)
    ParticleInventoryService:   @local::standard_particleinventoryservice
} # sbnd_backtracking_services


END_PROLOG

