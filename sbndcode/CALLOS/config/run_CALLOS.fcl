
# #include "services_sbnd.fcl"
# #include "messages_sbnd.fcl"
# #include "sam_sbnd.fcl"
# #include "simulationservices_sbnd.fcl"

#include "rootoutput_sbnd.fcl"
#include "CALLOS.fcl"

process_name: CALLOS

services:
{
  # Load the service that manages root files for histograms.
  # TFileService:              { fileName: "hists_%ifb_%p-%tc.root" } #uncomment for fancy schemancy name  %ifb is the input file base name, %p is the process name, %tc is the time created
  TFileService:              { fileName: "callos_ana_sbnd.root" } #simple name

  # message:                   @local::sbnd_message_services_prod # from messages_sbnd.fcl
  # FileCatalogMetadata:       @local::sbnd_file_catalog_mc       # from sam_sbnd.fcl
}


#source is now a root file
source:
{
  module_type: RootInput
  maxEvents:  -1        # Number of events to create
}


#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{

}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.


physics:
{  
  analyzers:
  {
    callosana: @local::SBNDCALLOS
  }

  # define the producer and filter modules for this path, order matters,
  # filters reject all following items.  see lines starting physics.producers below

  ana: [ callosana]

  # define the output stream, there could be more than one if using filters
  stream1:  []

  # trigger_paths is a keyword and contains the paths that modify the art::event,
  # ie filters and producers

  # end_paths is a keyword and contains the paths that do not modify the art::Event,
  # ie analyzers and output streams.  these all run simultaneously
  end_paths:     [ana, stream1]

}