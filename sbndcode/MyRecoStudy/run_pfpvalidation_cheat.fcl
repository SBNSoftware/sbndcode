#include "mctrutht0matching.fcl"
#include "services_sbnd.fcl"
#include "simulationservices_sbnd.fcl"
#include "messages_sbnd.fcl"
#include "sam_sbnd.fcl"
#include "larfft_sbnd.fcl"
#include "signalservices_sbnd.fcl"
#include "rootoutput_sbnd.fcl"

#include "pandoramodules_sbnd.fcl"
#include "config_pfpvalidation.fcl"

process_name: Mypfpvalid
     
services:
{
  # Load the service that manages root files for histograms.
  TFileService:              { fileName: @local::sbnd_tfileoutput.fileName }
  message:                   @local::sbnd_message_services_prod # from messages_sbnd.fcl
  FileCatalogMetadata:       @local::sbnd_file_catalog_mc       # from sam_sbnd.fcl
                             @table::sbnd_services              # from services_sbnd.fcl
                             @table::sbnd_random_services       # from services_sbnd.fcl; required by fuzzyCluster
                             @table::sbnd_g4_services           # from simulationservices_sbnd.fcl; required by opt0finder
  LArFFT:                    @local::sbnd_larfft
  SignalShapingServiceSBND: @local::sbnd_signalshapingservice  # from signalservices_sbnd.fcl
  BackTrackerService: @local::sbnd_backtrackerservice
  ParticleInventoryService:  @local::sbnd_particleinventoryservice
}

source:
{
  module_type: RootInput
  maxEvents:  -1        # Number of events to create
}

physics:
{

  producers:
  {
     pandora:           @local::sbnd_pandora
     pandoraTrack:      @local::sbnd_pandoraTrackCreation
     pandoraShower:     @local::sbnd_incremental_pandoraModularShowerCreation
  }

  analyzers:
  {
    pfpvalidation: @local::pfpvalidation
  }  


  reco: [ pandora, pandoraTrack, pandoraShower ]
  ana: [ pfpvalidation ]
  trigger_paths: [reco]
  end_paths: [ ana ]

}

physics.producers.pandora.EnableMCParticles: true
services.BackTrackerService.BackTracker.SimChannelModuleLabel: "simdrift"
physics.producers.pandora.SimChannelModuleLabel: "simdrift"
physics.producers.pandora.ConfigFile: "PandoraSettings_Cheat.xml"
