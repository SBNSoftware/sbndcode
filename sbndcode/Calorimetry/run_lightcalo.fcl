#include "services_sbnd.fcl"
#include "simulationservices_sbnd.fcl"
#include "messages_sbnd.fcl"
#include "sam_sbnd.fcl"
#include "particleinventoryservice.fcl"
#include "backtrackerservice.fcl"

#include "lightcalo.fcl"
#include "lightcalo_ana.fcl"

process_name: LightCaloProducer

services:
{
    TFileService:              { fileName: "lightcalo_tree.root" }
    RandomNumberGenerator:     {}
    message:                   @local::sbnd_message_services_prod # from messages_sbnd.fcl
    FileCatalogMetadata:       @local::sbnd_file_catalog_mc       # from sam_sbnd.fcl
                                @table::sbnd_services              # from services_sbnd.fcl
                                @table::sbnd_g4_services
    BackTrackerService: @local::standard_backtrackerservice
    ParticleInventoryService: @local::standard_particleinventoryservice

}

source:
{
    module_type: RootInput
                 maxEvents: -1
}

outputs:
{
    out1:
    {
        module_type: RootOutput
        fileName: "lightcalo-art.root"
        dataTier: "reconstructed"
        compressionLevel:1
        SelectEvents: ["reco"]
    }
}

physics:
{   
    producers:
    {
        lightcalo: @local::lightcalo
    }
    analyzers:
    {
        lightcaloana: @local::lightcalo_ana
    }
    #define the producer and filter modules for this path, order matters,
    reco: [lightcalo]
    ana:  [lightcaloana]

    # define the output stream, there could be more than one if using filters
    stream1: [out1]

    # trigger_paths is a keyword and contains the paths that modify the art::event,
    # ie filters and producers
    trigger_paths: [reco]

    # end_paths is a keyword and contains the paths that do not modify the art::Event,
    # ie analyzers and output streams.  these all run simultaneously
    end_paths: [stream1]
}

services.BackTrackerService.BackTracker.SimChannelModuleLabel: "simdrift"