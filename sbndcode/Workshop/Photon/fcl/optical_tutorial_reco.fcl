#include "services_sbnd.fcl"
#include "simulationservices_sbnd.fcl"
#include "messages_sbnd.fcl"
#include "sam_sbnd.fcl"

###Reconstruction modules
#include "ophit_finder_sbnd.fcl"
#include "sbnd_flashfinder.fcl"

###Analyzer modules
#include "hitdumpermodule.fcl"
#include "opticaldetectormodules_sbnd.fcl"



process_name: Reco

services:
{
  # Load the service that manages root files for histograms.
  TFileService:              { fileName: "%ifb_%p_hist.root" }
  RandomNumberGenerator:     {}
  message:                   @local::sbnd_message_services_prod # from messages_sbnd.fcl
  FileCatalogMetadata:       @local::sbnd_file_catalog_mc       # from sam_sbnd.fcl
                             @table::sbnd_services              # from services_sbnd.fcl
                             @table::sbnd_g4_services
}


#source is now a root file
source:
{
  module_type: RootInput
  maxEvents:  -1  # Number of events to create
}


#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
  out1:
  {
    module_type: RootOutput
    fileName:    "%ifb_Reco.root"
    dataTier:    "reconstructed"
    compressionLevel: 1
 }
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

  #Reconstruction @OpHit level for PMTs
  #Reconstruction @OpFlash level, TPC0 and TPC1
  producers:
  {
    ophitpmt:      @local::sbnd_ophit_finder_pmt
    opflashtpc0:   @local::SBNDSimpleFlashTPC0
    opflashtpc1:   @local::SBNDSimpleFlashTPC1
  }

  #Load analyzers
  #hitdumpertree from sbndcode/Commissioning/HitDumper_module
  #  Analyzer from larana/OpticalDetector
  analyzers:
  {
    oprecoanatpc0: @local::standard_opflashana
    oprecoanatpc1: @local::standard_opflashana
    hitdumpertree: @local::hitdumper
  }


  #define the producer and filter modules for this path, order matters,
  #filters reject all following items.  see lines starting physics.producers below
  reco: [
    ophitpmt,
    opflashtpc0,
    opflashtpc1
  ]

  ana: [oprecoanatpc0, oprecoanatpc1, hitdumpertree]

  # define the output stream, there could be more than one if using filters
  stream1: [out1]

  # trigger_paths is a keyword and contains the paths that modify the art::event,
  # ie filters and producers
  trigger_paths: [reco]

  # end_paths is a keyword and contains the paths that do not modify the art::Event,
  # ie analyzers and output streams.  these all run simultaneously
  end_paths: [ana, stream1]
}


### OpFlash configuration (use only PMTs)
physics.producers.opflashtpc0.OpHitProducers: ["ophitpmt"]
physics.producers.opflashtpc1.OpHitProducers: ["ophitpmt"]


### Analyzer configuration
physics.analyzers.oprecoanatpc0.OpFlashModuleLabel: "opflashtpc0"
physics.analyzers.oprecoanatpc0.OpHitModuleLabel: "ophitpmt"
physics.analyzers.oprecoanatpc1.OpFlashModuleLabel: "opflashtpc1"
physics.analyzers.oprecoanatpc1.OpHitModuleLabel: "ophitpmt"

physics.analyzers.oprecoanatpc0.MakePerEventFlashTree: true
physics.analyzers.oprecoanatpc0.MakeFlashHitMatchTree: true
physics.analyzers.oprecoanatpc1.MakePerEventFlashTree: true
physics.analyzers.oprecoanatpc1.MakeFlashHitMatchTree: true

physics.analyzers.oprecoanatpc1.YMin: -200
physics.analyzers.oprecoanatpc1.YMax: 200
physics.analyzers.oprecoanatpc1.ZMin: 0
physics.analyzers.oprecoanatpc1.ZMax: 500

physics.analyzers.oprecoanatpc0.YMin: -200
physics.analyzers.oprecoanatpc0.YMax: 200
physics.analyzers.oprecoanatpc0.ZMin: 0
physics.analyzers.oprecoanatpc0.ZMax: 500

physics.analyzers.hitdumpertree.keepCRThits: false
physics.analyzers.hitdumpertree.makeCRTtracks: false
physics.analyzers.hitdumpertree.readCRTtracks: false
physics.analyzers.hitdumpertree.readMuonTracks: false
physics.analyzers.hitdumpertree.readTruth: false
physics.analyzers.hitdumpertree.savePOTinfo: false
