#include "services_sbnd.fcl"
#include "simulationservices_sbnd.fcl"
#include "messages_sbnd.fcl"
#include "sam_sbnd.fcl"

#include "opdetdigitizer_sbnd.fcl"
#include "ophitfinder_sbnd.fcl"
#include "ophit_finder_sbnd.fcl"
#include "sbnd_flashfinder.fcl"
#include "sbnd_mcflash.fcl"
#include "sbnd_flashana.fcl"

process_name: FlashFinder

services:
{
  # Load the service that manages root files for histograms.
  TFileService:              { fileName: "flashfinder_tree.root" }
  RandomNumberGenerator:     {}
  message:                   @local::sbnd_message_services_prod # from messages_sbnd.fcl
  FileCatalogMetadata:       @local::sbnd_file_catalog_mc       # from sam_sbnd.fcl
                             @table::sbnd_services              # from services_sbnd.fcl
                             @table::sbnd_g4_services
}


#source is now a root file
source:
{
  module_type: RootInput
  maxEvents:  -1  # Number of events to create
}


#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
  out1:
  {
    module_type: RootOutput
    fileName:    "flashfinder-art.root"
    dataTier:    "reconstructed"
    compressionLevel: 1
    # SelectEvents: ["reco"]
 }
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{
  producers:
  {
    opdaq:         @local::sbnd_opdetdigitizer
    ophitpmt:      @local::sbnd_ophit_finder_pmt
    ophitarapuca:  @local::sbnd_ophit_finder_arapuca
    opflashtpc0:   @local::SBNDSimpleFlashTPC0
    opflashtpc1:   @local::SBNDSimpleFlashTPC1
    mcflashtpc0:   @local::SBNDMCFlashTPC0
    mcflashtpc1:   @local::SBNDMCFlashTPC1

  }

  analyzers:
  {
    flashana:     @local::sbnd_flashana
  }


  #define the producer and filter modules for this path, order matters,
  #filters reject all following items.  see lines starting physics.producers below
  reco: [
    opdaq,
    ophitpmt,
    ophitarapuca,
    opflashtpc0,
    opflashtpc1,
    mcflashtpc0,
    mcflashtpc1
  ]

  ana: [flashana]

  # define the output stream, there could be more than one if using filters
  stream1: [out1]

  # trigger_paths is a keyword and contains the paths that modify the art::event,
  # ie filters and producers
  trigger_paths: [reco]

  # end_paths is a keyword and contains the paths that do not modify the art::Event,
  # ie analyzers and output streams.  these all run simultaneously
  end_paths: [ana, stream1]
}

## Uncomment these if you switch to test bench response
# physics.producers.opdaq.PMTSinglePEmodel: true
# physics.producers.opdaq.ArapucaSinglePEmodel: true
# physics.producers.opdaq.PMTChargeToADC: -51.9
# physics.producers.ophit.SPEArea: 317.1
# physics.producers.ophit.PedAlgoPset.SampleSize: 10
# physics.producers.ophit.PedAlgoPset.Threshold: 15
# physics.producers.ophit.HitAlgoPset.ADCThreshold: 35
# physics.producers.opflashtpc0.PECalib.SPEAreaGain: 317.1
# physics.producers.opflashtpc1.PECalib.SPEAreaGain: 317.1


