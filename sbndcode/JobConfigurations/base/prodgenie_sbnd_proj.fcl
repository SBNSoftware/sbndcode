#include "simulationservices_sbnd.fcl"
#include "largeantmodules_sbnd.fcl"
#include "detsimmodules_sbnd.fcl"

process_name: GenieGen

standard_genie:

{

 module_type:      "GENIEGen"
 PassEmptySpills:  false
 FluxType:         "simple_flux"     #mono, histogram, ntuple, or simple_flux
 FluxFiles:         ["gsimple_SBND_april07_baseline_z20_00001.root"] #name of file with flux histos
 BeamName:         "booster"          #numi or booster at this point - really for bookkeeping
 TopVolume:        "volDetEnclosure"        #volume in which to produce interactions
 EventsPerSpill:   0.              #set != 0 to get n events per spill
 POTPerSpill:      5.e12           #should be obvious
 MonoEnergy:       2.              #in GEV
 BeamCenter:       [-1400., -350., 0.]  #center of the beam in cm relative to detector coordinate origin, in meters for GENIE
 BeamDirection:    [0., 0., 1.]    #all in the z direction
 BeamRadius:       3.              #in meters for GENIE
 SurroundingMass:  0.0             #mass surrounding the detector to use
 GlobalTimeOffset: 1.25e6          #in ns - 10000 means the spill appears 10 us into the readout window
 RandomTimeOffset: 1600.          #length of spill in ns
 FiducialCut:      "none"          #fiducial cut, see https://cdcvs.fnal.gov/redmine/projects/nusoft/wiki/GENIEHelper
 GenFlavors:       [12,14,-12,-14] #pdg codes of flux generator neutrino flavors
 Environment:      ["GPRODMODE", 
                    "YES",
                    "GEVGL",       #GEVGL sets the type of interactions to make
                    "Default"]     #Default is everything, can also do NC, CC, etc, 
                                   #see $GENIE/config/EventGeneratorListAssembler.xml 
                                   #for possible configuration options
 ProductionMode:   "yes"           #turn off the GENIE verbosity
 DetectorLocation: "MINOS-NearDet" #location name for flux window
 MixerConfig:      "none"          #no flux mixing by default
 #MixerConfig:     "swap 12:16 14:16 -12:-16 -14:-16" # example flavor swapping
 MixerBaseline:    0.              #distance from tgt to flux window needs to be set if using histogram flx
 DebugFlags:       0               #no debug flags on by default

}



services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "genie_hist.root" }
  IFDH:         {} # required by GENIEGen
  RandomNumberGenerator: {} #ART native random number generator
  FileCatalogMetadata:  @local::sbnd_file_catalog_mc
  user:         @local::sbnd_simulation_services
}

#Start each new event with an empty event.
source:
{
  module_type: EmptyEvent
  maxEvents:   10          # Number of events to create
  firstRun:    1           # Run number to use for this file
  firstEvent:  1           # number of first event in the file
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 producers:
 {
   generator: @local::standard_genie
   rns:       { module_type: "RandomNumberSaver" }
 }

 #define the producer and filter modules for this path, order matters, 
 #filters reject all following items.  see lines starting physics.producers below
 simulate: [ generator, rns ] 
 
 #define the output stream, there could be more than one if using filters 
 stream1:  [ out1 ]

 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 trigger_paths: [simulate] 

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [stream1]  
}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   dataTier:    "generated" 
   fileName:    "genie_gen.root" #default file name, can override from command line with -o or --output
 }
}


services.user.FileCatalogMetadataExtras:  @local::sbnd_file_catalog
services.user.FileCatalogMetadataExtras.Metadata: [ "group",      "sbnd",
                                                    "fileFormat", "root",
                                                    "runType",    "physics",
                                                    "fclName",    "prodgenie_sbnd.fcl",
                                                    "fclVersion", "v1_5" ]
services.user.FileCatalogMetadataExtras.RenameTemplate: "prodgenie_sbnd_${CLUSTER 0}_${PROCESS 0}.root"
