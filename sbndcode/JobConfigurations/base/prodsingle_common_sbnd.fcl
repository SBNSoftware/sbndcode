#
# File:    prodsingle_common_sbnd.fcl
# Purpose: Base configuration for the generation of single particle
# Version: 1.1
# 
# This configuration runs event generation only.
# 
# Input: no input file required
# 
#
# Changes:
# 20160707 (petrillo@fnal.gov) [v1.1]
#   - uniformed to prodsingle_sbnd.fcl
#

#
# services
#

#include "services_sbnd.fcl"

#
# algorithms
#

#include "singles_sbnd.fcl"

process_name: SinglesGen

services:
{
                        @table::sbnd_basic_services
                        @table::sbnd_random_services
  TFileService:         { fileName: "hists_prodeminus_0.1_0.9_sbnd_%p-%tc.root" }
  FileCatalogMetadata:  @local::sbnd_file_catalog_mc
}

#Start each new event with an empty event.
source:
{
  module_type:     EmptyEvent
  timestampPlugin: { plugin_type: "GeneratedEventTimestamp" }
  maxEvents:      10  # Number of events to create
  firstRun:        1  # Run number to use for this file
  firstEvent:      1  # number of first event in the file
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 producers:
 {
   generator: @local::sbnd_singlep
   rns:       { module_type: "RandomNumberSaver" }
 }

 #define the producer and filter modules for this path, order matters, 
 #filters reject all following items.  see lines starting physics.producers below
 simulate: [ rns, generator ]

 #define the output stream, there could be more than one if using filters 
 stream1:  [ out1 ]

 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 trigger_paths: [simulate] 

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [stream1]  
}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
  out1:
  {
    module_type: RootOutput
    fileName:    "prodeminus_0.1_0.9_sbnd_%p-%tc.root"
    dataTier:    "generated"
    compressionLevel: 1
  }
}

physics.producers.generator.X0: [ 0.0 ]
physics.producers.generator.Y0: [ 0.0 ]
physics.producers.generator.Z0: [ -42. ]
physics.producers.generator.T0: [ 0 ]              # ns (relative to beam gate time)
physics.producers.generator.SigmaX: [ 5.0 ]      # x = (0, 256)
physics.producers.generator.SigmaY: [ 5.5 ]      # y = (-116.5, 116.5)
physics.producers.generator.SigmaZ: [ 0 ]      # z = (0, 1037)
physics.producers.generator.SigmaT: [ 0.0 ]        # In time
physics.producers.generator.AngleDist: 0           # Flat angle dist.
physics.producers.generator.Theta0XZ: [ 0. ]       # y-azimuth
physics.producers.generator.Theta0YZ: [ 0. ]       # y-latitude
physics.producers.generator.SigmaThetaXZ: [ 10. ] # Quasi-isotropic
physics.producers.generator.SigmaThetaYZ: [ 10. ]
