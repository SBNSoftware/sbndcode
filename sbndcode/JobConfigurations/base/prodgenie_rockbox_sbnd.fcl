#
# File:    prodgenie_rockbox sbnd.fcl
# Purpose: Produce GENIE events in the SBND detector and surrounding dirt with spill structure
#          using rockbox functionality in GENIEHelper
# Version: 1.0
#
# This configuration runs event generation and largenat
#
# Input: no input file required
#
# Dependencies:
# - uses the bundle of SBND simulation services
#
#

#
# services
#

#include "simulationservices_sbnd.fcl"
#include "messages_sbnd.fcl"

#
# filters
#

#include "gennufilter.fcl"
#include "simenergydepfaketriggerfilter.fcl"

#
# modules
#

#include "genie_sbnd.fcl"
#include "larg4_sbnd.fcl"
#include "mlreco_sbnd.fcl"


process_name: GenieGen

services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "hists_prodgenie_sbnd_%p-%tc.root" }
  IFDH:         {} # required by GENIEGen
  @table::sbnd_simulation_services # load simulation services in bulk
  @table::sbnd_g4_services
}

# Start each new event with an empty event.
source:
{
  module_type:     EmptyEvent
  timestampPlugin: { plugin_type: "GeneratedEventTimestamp" }
  maxEvents:      10          # Number of events to create
  firstRun:        1          # Run number to use for this file
  firstEvent:      1          # number of first event in the file
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

  filters:
  {
    # Filter events that have an interaction in the TPC
    tpcfilter: @local::sbnd_tpc_gennufilter

    # Filter events where a particle deposits >100MeV in the TPC (AKA Dirt)
    dirtfilter: @local::sbnd_simenergydepfaketriggerfilter
  }


  producers:
  {
    rns:       { module_type: "RandomNumberSaver" }

    # Run GENIE in rockbox mode
    generator: @local::sbnd_genie_simple_rockbox

    # A dummy module that forces the G4 physics list to be loaded
    loader: { module_type: "PhysListLoader" }

    # The geant4 step
    largeant: @local::sbnd_larg4

    # Merge dropped and nominal MCParticle into separate list
    simplemerge: @local::sbnd_simplemerge
  }

  #define the producer and filter modules for this path, order matters,
  simulatetpc:  [ rns, generator, loader, largeant, simplemerge, tpcfilter ]
  simulatedirt: [ rns, generator, loader, largeant, simplemerge, "!tpcfilter", dirtfilter ]

  #define the output stream, there could be more than one if using filters
  # By deault Keep everything in one file:
  stream1:   [ out1 ]

  #ie analyzers and output streams.  these all run simultaneously
  end_paths: [stream1]
}

# block to define where the output goes.  if you defined a filter in the physics
# block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
# entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
  # Keep all events with either TPC neutrinos or dirt interactions in one output
  out1:
  {
    module_type: RootOutput
    fileName:    "prodgenie_sbnd_%p-%tc.root" # default file name, can override from command line with -o or --output
    dataTier:    "generated"
    SelectEvents: [ simulatetpc, simulatedirt ]
    saveMemoryObjectThreshold: 0
  }
}
