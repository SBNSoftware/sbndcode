#
# File:    prodsingle_sbnd.fcl
# Purpose: Produce single muon events including full SBND detector simulation
#
# This configuration runs event generation, simulation of propagation through
# matter and readout simulation.
#
# Input: no input file required
#
# This uses the new, refactored, LArG4
#
# Dependencies:
# - uses the bundle of SBND simulation services


#
# services
#

#include "simulationservices_sbnd.fcl"
#include "messages_sbnd.fcl"

#
# modules
#

#include "singles_sbnd.fcl"

#include "larg4_sbnd.fcl"
#include "ionandscint_sbnd.fcl"
#include "PDFastSim_sbnd.fcl"
#include "simdrift_sbnd.fcl"

#include "detsimmodules_sbnd.fcl"

#include "rootoutput_sbnd.fcl"



process_name: SingleGen

services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "hists_prodsingle_sbnd_%p-%tc.root" }
                @table::sbnd_simulation_services # load simulation services in bulk
}

# since this is a configuration typically run as interactive test,
# we set up message configuration accordingly:
services.message: @local::sbnd_message_services_interactive # from messages_sbnd.fcl


# Start each new event with an empty event.
source:
{
  module_type:     EmptyEvent
  timestampPlugin: { plugin_type: "GeneratedEventTimestamp" }
  maxEvents:      10          # Number of events to create
  firstRun:        1          # Run number to use for this file
  firstEvent:      1          # number of first event in the file
}


# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

  producers:
  {
    rns:       { module_type: "RandomNumberSaver" }

    # Generation
    generator: @local::sbnd_singlep

    # A dummy module that forces the G4 physics list to be loaded
    loader: { module_type: "PhysListLoader" }

    # The geant4 step
    largeant: @local::sbnd_larg4

    # Creation of ionization electrons and scintillation photons, inside the active volume
    ionandscint: @local::sbnd_ionandscint

    # Light propogation inside the active volume
    pdfastsim: @local::sbnd_pdfastsim_par

    # Electron propogation
    simdrift: @local::sbnd_simdrift

    # Detector simulation
    daq: @local::sbnd_simwire
  }

  #define the producer and filter modules for this path, order matters,
  # simulate:  [ rns, generator, largeant, daq]
  # simulate:  [ rns, generator ]
  simulate: [ rns
          , generator
          , loader
          , largeant
          , ionandscint
          , pdfastsim
          , simdrift
          , daq
        ]

  #define the output stream, there could be more than one if using filters
  stream1:   [ out1 ]

  #ie analyzers and output streams.  these all run simultaneously
  end_paths: [stream1]
}

# block to define where the output goes.  if you defined a filter in the physics
# block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
# entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
  out1:
  {
              @table::sbnd_rootoutput # inherit shared settings
    fileName: "prodsingle_sbnd_%p-%tc.root" # default file name, can override from command line with -o or --output
    outputCommands: [ "keep *_*_*_*"
                    , "drop *_ionandscint__*" # Drop the IonAndScint w/ SCE offsets applied
                    ]
  }
}

#
# at the end of the configuration, we can override single parameters to reflect our needs:
#
physics.producers.generator.T0: [ 0 ]
physics.producers.generator.Theta0XZ: [ 10 ]
