#
# File:    standard_detsim_sbnd.fcl
# Purpose: Simulates readout response to induced and collected charge
#
# This configuration runs the detector simulation
#
# Input:
# - output of OpticalFastSimulation
# - output of Ionization and Scintillation
#
# Output:
# - recob::Wire (TPC signals per channel)
# - sim::SimChannel (Simulated electrons per channel)
# - OpDetWaveforms (optical waveforms)
# - MCReco -> MCTrack, MCShower: deposited energy from each MCParticle (needs SimChannels)

#
# Dependencies:
# - uses the bundle of SBND simulation services for readout simulation


#
# services
#

#include "simulationservices_sbnd.fcl"
#include "messages_sbnd.fcl"

#
# modules
#

#include "wcsimsp_sbnd.fcl"
#include "crtsimmodules_sbnd.fcl"
#include "opdetdigitizer_sbnd.fcl"
#include "mcreco_sbnd.fcl"
#include "rootoutput_sbnd.fcl"


process_name: DetSim

services:
{
  TFileService: { fileName: @local::sbnd_tfileoutput.fileName }
  @table::sbnd_detsim_services
  FileCatalogMetadata: @local::sbnd_file_catalog_mc
  AuxDetExptGeoHelperInterface: { service_provider: "sbndcode/CRT/CRTGeometryHelper" }
  AuxDetGeometry: { @table::sbnd_geo_source }
}


source:
{
  module_type:     RootInput
}


# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

  producers:
  {
    rns:       { module_type: "RandomNumberSaver" }
    simtpc2d:  @local::sbnd_wcls_simsp 
    crtsim:    @local::sbnd_crtsim
    opdaq:     @local::sbnd_opdetdigitizer
    mcreco:    @local::sbnd_mcreco
  }

  #define the producer and filter modules for this path, order matters,
  simulate: [rns, simtpc2d, crtsim, opdaq, mcreco]

  #define the output stream, there could be more than one if using filters
  stream1:   [ out1 ]

  #ie analyzers and output streams.  these all run simultaneously
  end_paths: [stream1]
}

# block to define where the output goes.  if you defined a filter in the physics
# block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
# entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
  out1:
  {
    @table::sbnd_rootoutput # inherit shared settings
    dataTier: "simulated"
    compressionLevel: 1 # TODO better to use no compression here and Huffman encoding
  }
}

