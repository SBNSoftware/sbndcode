#include "simulationservices_sbnd.fcl"
#include "crtbacktracker_sbnd.fcl"
#include "configs_crt_analyzer.fcl"

process_name: CRTSelectionAnalyzer

services:
{
  scheduler:    { defaultExceptions: false }    # Make all uncaught exceptions fatal.
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "crtSelectionAna_sbnd.root" }
  # TimeTracker:         {}
  # MemoryTracker:       {} # default is one
  # RandomNumberGenerator: {} #ART native random number generator
  ParticleInventoryService: @local::sbnd_particleinventoryservice
  FileCatalogMetadata:  @local::art_file_catalog_mc
  @table::sbnd_g4_services

}

source:
{
  module_type: RootInput
  maxEvents:   -1          # Number of events to create
  firstRun:    1           # Run number to use for this file
  firstEvent:  1           # number of first event in the file
}

physics:
{

 producers:
 {}

 analyzers:
 {
  crtana: @local::sbnd_crtselectionana_realhits
 }

 #define the producer and filter modules for this path, order matters,
 #filters reject all following items.  see lines starting physics.producers below
 simulate: [ ]
 ana: [ crtana ]

 #define the output stream, there could be more than one if using filters
 stream1:  [ out1 ]

 #trigger_paths is a keyword and contains the paths that modify the art::event,
 #ie filters and producers
 trigger_paths: [ ]

 #end_paths is a keyword and contains the paths that do not modify the art::Event,
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [ ana ]
 }

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "out-art.root"
   dataTier:    "generated"
   compressionLevel: 1
 }
}
physics.analyzers.crtana.InteractionMode: 0
#include "use_crt_beam_tele_geometry_g4_services.fcl"