#include "simulationservices_sbnd.fcl"
#include "prismanalyzer.fcl"
#include "eventweight_flux_sbn.fcl"
#include "eventweight_genie_sbn.fcl"
#include "eventweight_genie_singleknobs_sbn.fcl"

process_name: PrismAnalyzer

services:
{
  scheduler:    { defaultExceptions: false }    # Make all uncaught exceptions fatal.
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "sbndprism_ana_sbnd.root" }
  # TimeTracker:         {}
  # MemoryTracker:       {} # default is one
  # RandomNumberGenerator: {} #ART native random number generator
  FileCatalogMetadata:  @local::art_file_catalog_mc
  @table::sbnd_g4_services
}

#Start each new event with an empty event.
source:
{
  module_type: RootInput
  maxEvents:   10          # Number of events to create
  firstRun:    1           # Run number to use for this file
  firstEvent:  1           # number of first event in the file
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 producers:
 {
   fluxweight:     @local::sbn_eventweight_flux
   genieweight:    @local::sbn_eventweight_genie
   genieweightA:    @local::sbn_eventweight_genie
   genieweightB:    @local::sbn_eventweight_genie
   genieweightC:    @local::sbn_eventweight_genie
   genieweightsk:  @local::sbn_eventweight_genie_single_knobs
   rns:            { module_type: "RandomNumberSaver" }
 }

 analyzers:
 {
  prismana:     @local::prismanalyzer
 }

 #define the producer and filter modules for this path, order matters,
 #filters reject all following items.  see lines starting physics.producers below
 simulate: [ rns, fluxweight, genieweight, genieweightA, genieweightB, genieweightC, genieweightsk ]
 ana: [ prismana ]

 #define the output stream, there could be more than one if using filters
 stream1:  [ out1 ]

 #trigger_paths is a keyword and contains the paths that modify the art::event,
 #ie filters and producers
 trigger_paths: [ simulate ]

 #end_paths is a keyword and contains the paths that do not modify the art::Event,
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [ana]
 }

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "out-art.root"
   dataTier:    "generated"
   compressionLevel: 1
 }
}

physics.producers.fluxweight.weight_functions: @local::physics.producers.fluxweight.weight_functions_flux

physics.producers.genieweight.weight_functions: @local::physics.producers.genieweight.weight_functions_genie
physics.producers.genieweight.genie_sbnd_multisim.number_of_multisims: 100

# physics.producers.genieweightsk.genie_sbnd_multisim.number_of_multisims: 1


# Double the MACCQE sigma
physics.producers.genieweightA.weight_functions: @local::physics.producers.genieweight.weight_functions_genie
physics.producers.genieweightA.genie_sbnd_multisim.number_of_multisims: 100
physics.producers.genieweightA.genie_sbnd_multisim.parameter_sigma: [
      #CCQE
      2,
      #Res
      1,1,1,1,
      #Non_Res
      1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
      #NC
      1,1, #1,
      #DIS
      1,1,1,1, #1,
      #FSI
      1,1,1,1,1,1,1,1 #,1,1
]

# Double the MaCCRES sigma
physics.producers.genieweightB.weight_functions: @local::physics.producers.genieweight.weight_functions_genie
physics.producers.genieweightB.genie_sbnd_multisim.number_of_multisims: 100
physics.producers.genieweightB.genie_sbnd_multisim.parameter_sigma: [
      #CCQE
      1,
      #Res
      2,1,1,1,
      #Non_Res
      1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
      #NC
      1,1, #1,
      #DIS
      1,1,1,1, #1,
      #FSI
      1,1,1,1,1,1,1,1 #,1,1
]

# Double the MvCCRES sigma
physics.producers.genieweightC.weight_functions: @local::physics.producers.genieweight.weight_functions_genie
physics.producers.genieweightC.genie_sbnd_multisim.number_of_multisims: 100
physics.producers.genieweightC.genie_sbnd_multisim.parameter_sigma: [
      #CCQE
      1,
      #Res
      1,2,1,1,
      #Non_Res
      1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
      #NC
      1,1, #1,
      #DIS
      1,1,1,1, #1,
      #FSI
      1,1,1,1,1,1,1,1 #,1,1
]







